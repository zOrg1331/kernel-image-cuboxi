From: Frank Arnold <farnold@redhat.com>
Date: Mon, 21 Feb 2011 19:38:13 -0500
Subject: [x86] fix AMD family 0x15 guest boot issue on 64-bit host
Message-id: <1298317093-32020-1-git-send-email-farnold@redhat.com>
Patchwork-id: 33473
O-Subject: [RHEL5.7 PATCH BZ667234 V2] x86: Fix AMD family 0x15 boot issue on
	64-bit
Bugzilla: 667234
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

The fix introduced with bug 560013 added a check for presence of
a northbridge device to amd_fixup_dcm() to make RHEL 5 guests boot
on a 5.4.z Xen hypervisor. This hypervisor doesn't properly mask
the NodeID MSR from the guest, which was fixed in 5.5.

This check now causes a panic under 64-bit in the scheduler code due
to missing multi-node CPU topology detection on AMD family 0x15
(Istanbul).

To preserve the backwards compatibility we have to keep this check.
This patch changes the check to trigger it only on AMD Magny-Cours
systems.

For AMD family 0x15 we don't need this check, because all hypervisors
with support for this family are properly masking the NodeID MSR from
the guest system.

V2 of this patch adds verbose comments to describe this special
scenario.

Bugzilla:
    https://bugzilla.redhat.com/show_bug.cgi?id=667234

Brew:
    https://brewweb.devel.redhat.com/taskinfo?taskID=3128154

Upstream Status:
    not applicable, RHEL 5 specific

Test Status:
    Boot tested on amd-dinar-06.lab.bos.redhat.com (AMD Istanbul)
    and internally at AMD on an AMD Magny-Cours system.

    Tested variants on Magny-Cours and Istanbul:
    * kernel.x86_64
    * kernel-PAE.i686
    * kernel-xen.x86_64
    * kernel-xen.i686

    Special Magny-Cours scenarios:
    * kernel.x86_64 as a HVM guest on a 5.4.z Xen hypervisor
    * kernel-PAE.i686 as a HVM guest on a 5.4.z Xen hypervisor

Signed-off-by: Frank Arnold <farnold@redhat.com>

diff --git a/arch/i386/kernel/cpu/amd.c b/arch/i386/kernel/cpu/amd.c
index 628baca..ac92c47 100644
--- a/arch/i386/kernel/cpu/amd.c
+++ b/arch/i386/kernel/cpu/amd.c
@@ -45,10 +45,24 @@ static void __cpuinit amd_fixup_dcm(struct cpuinfo_x86 *c)
 	if (cpu_has(c, X86_FEATURE_AMD_DCM))
 		return;
 
-	/* proceed only if there is a valid AMD northbridge
-	 * (not in virtualized environments!)
+	/* RHEL5: Check for a valid AMD northbridge device, which does
+	 * not exist in virtualized environments.
+	 *
+	 * The check is needed for running as guest system on top of a
+	 * 5.4.z Xen hypervisor. The 5.4.z Xen hypervisor does not mask
+	 * the NodeID MSR from the guest. Without this check the guest
+	 * system would perform the multi-node fixup routines, eventually
+	 * resulting in a panic of the guest system.
+	 *
+	 * This check does not need to be extended for future CPU families
+	 * and models. CPU family 16, model 9 is the only affected model
+	 * which is supported by 5.4.z. From 5.5 onwards, the NodeID MSR
+	 * is properly masked from the guest system.
+	 *
+	 * Bugzilla references: 547518, 560013, 667234
 	 */
-	if (!early_is_k8_nb(read_pci_config(0, 24, 3, 0x00)))
+	if ((c->x86 == 0x10) && (c->x86_model == 9) &&
+	    !early_is_k8_nb(read_pci_config(0, 24, 3, 0x00)))
 		return;
 
 	rdmsrl(0xc001100c, value);
diff --git a/arch/x86_64/kernel/setup.c b/arch/x86_64/kernel/setup.c
index b7232bf..6a09202 100644
--- a/arch/x86_64/kernel/setup.c
+++ b/arch/x86_64/kernel/setup.c
@@ -839,10 +839,24 @@ static void __cpuinit amd_fixup_dcm(struct cpuinfo_x86 *c)
 	if (cpu_has(c, X86_FEATURE_AMD_DCM))
 		return;
 
-	/* proceed only if there is a valid AMD northbridge
-	 * (not in virtualized environments!)
+	/* RHEL5: Check for a valid AMD northbridge device, which does
+	 * not exist in virtualized environments.
+	 *
+	 * The check is needed for running as guest system on top of a
+	 * 5.4.z Xen hypervisor. The 5.4.z Xen hypervisor does not mask
+	 * the NodeID MSR from the guest. Without this check the guest
+	 * system would perform the multi-node fixup routines, eventually
+	 * resulting in a panic of the guest system.
+	 *
+	 * This check does not need to be extended for future CPU families
+	 * and models. CPU family 16, model 9 is the only affected model
+	 * which is supported by 5.4.z. From 5.5 onwards, the NodeID MSR
+	 * is properly masked from the guest system.
+	 *
+	 * Bugzilla references: 547518, 560013, 667234
 	 */
-	if (!early_is_k8_nb(read_pci_config(0, 24, 3, 0x00)))
+	if ((c->x86 == 0x10) && (c->x86_model == 9) &&
+	    !early_is_k8_nb(read_pci_config(0, 24, 3, 0x00)))
 		return;
 
 	rdmsrl(0xc001100c, value);
