From: Doug Chapman <dchapman@redhat.com>
Date: Wed, 9 Jul 2008 12:26:34 -0400
Subject: [ia64] avoid unnecessary TLB flushes when allocating mem
Message-id: 1215620794.14037.3.camel@deimos.americas.hpqcorp.net
O-Subject: [RHEL5.3 PATCH][IA64] Avoid unnecessary TLB flushes when allocating memory
Bugzilla: 435362
RH-Acked-by: Jarod Wilson <jwilson@redhat.com>
RH-Acked-by: Larry Woodman <lwoodman@redhat.com>
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>

Fix for BZ 435362

Direct backport (no changes) of aec103bfa60e9f72bd66a144236592f54b986a03

    [IA64] Avoid unnecessary TLB flushes when allocating memory

    Improve performance of memory allocations on ia64 by avoiding a global TLB
    purge to purge a single page from the file cache. This happens whenever we
    evict a page from the buffer cache to make room for some other allocation.

    Test case: Run 'find /usr -type f | xargs cat > /dev/null' in the
    background to fill the buffer cache, then run something that uses memory,
    e.g. 'gmake -j50 install'. Instrumentation showed that the number of
    global TLB purges went from a few millions down to about 170 over a 12
    hours run of the above.

    The performance impact is particularly noticeable under virtualization,
    because a virtual TLB is generally both larger and slower to purge than
    a physical one.

    Signed-off-by: Christophe de Dinechin <ddd@hp.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>

 arch/ia64/mm/tlb.c |   18 +++++++++++++++---
 1 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/arch/ia64/mm/tlb.c b/arch/ia64/mm/tlb.c
index ffad762..e35521b 100644
--- a/arch/ia64/mm/tlb.c
+++ b/arch/ia64/mm/tlb.c
@@ -10,6 +10,7 @@
  *              IPI based ptc implementation and A-step IPI implementation.
  * Rohit Seth <rohit.seth@intel.com>
  * Ken Chen <kenneth.w.chen@intel.com>
+ * Christophe de Dinechin <ddd@hp.com>: Avoid ptc.e on memory allocation
  */
 #include <linux/module.h>
 #include <linux/init.h>
@@ -89,9 +90,16 @@ ia64_global_tlb_purge (struct mm_struct *mm, unsigned long start,
 {
 	static DEFINE_SPINLOCK(ptcg_lock);
 
-	if (mm != current->active_mm || !current->mm) {
-		flush_tlb_all();
-		return;
+	struct mm_struct *active_mm = current->active_mm;
+
+	if (mm != active_mm) {
+		/* Restore region IDs for mm */
+		if (mm && active_mm) {
+			activate_context(mm);
+		} else {
+			flush_tlb_all();
+			return;
+		}
 	}
 
 	/* HW requires global serialization of ptc.ga.  */
@@ -107,6 +115,10 @@ ia64_global_tlb_purge (struct mm_struct *mm, unsigned long start,
 		} while (start < end);
 	}
 	spin_unlock(&ptcg_lock);
+
+        if (mm != active_mm) {
+                activate_context(active_mm);
+        }
 }
 
 void
