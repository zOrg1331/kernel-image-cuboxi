X-Account-Key: account4
X-UIDL: c3fb6bd80ca2996b
X-Mozilla-Status: 0001
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Received: from relay.parallels.com (relay.parallels.com [195.214.232.42])
	by relay.sw.ru (8.13.4/8.13.4) with ESMTP id nBSGB5KS031825
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Mon, 28 Dec 2009 19:11:06 +0300 (MSK)
Received: from mx1.parallels.com ([64.131.89.18])
	by relay.parallels.com with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.69)
	(envelope-from <vgusev@openvz.org>)
	id 1NPIBT-0001Yw-VQ; Mon, 28 Dec 2009 19:11:04 +0300
Received: from mailhub.sw.ru ([195.214.232.25] helo=relay.sw.ru)
	by mx1.parallels.com with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.69)
	(envelope-from <vgusev@openvz.org>)
	id 1NPIBS-0004FK-T2; Mon, 28 Dec 2009 11:11:03 -0500
Received: from localhost.localdomain ([10.30.18.218])
	by relay.sw.ru (8.13.4/8.13.4) with ESMTP id nBSGATe8014845;
	Mon, 28 Dec 2009 19:10:32 +0300 (MSK)
From: Vitaliy Gusev <vgusev@openvz.org>
To: xemul@openvz.org
Cc: vz@lists.sw.ru, khorenko@parallels.com, alexey@parallels.com,
        Vitaliy Gusev <vgusev@openvz.org>
Subject: [CPT][2.6.18][PATCH 1/2] tun: Wrap socket alloc code as tun_sk_alloc_init()
Date: Mon, 28 Dec 2009 19:14:16 +0300
Message-Id: <1262016857-17605-2-git-send-email-vgusev@openvz.org>
X-Mailer: git-send-email 1.6.0.2
In-Reply-To: <1262016857-17605-1-git-send-email-vgusev@openvz.org>
References: <1262016857-17605-1-git-send-email-vgusev@openvz.org>

Signed-off-by: Vitaliy Gusev <vgusev@openvz.org>
---
 drivers/net/tun.c |   40 ++++++++++++++++++++++++----------------
 1 files changed, 24 insertions(+), 16 deletions(-)

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 1e6dd3b..bbf5fe5 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -797,9 +797,29 @@ static struct proto tun_proto = {
 	.obj_size	= sizeof(struct tun_sock),
 };
 
-static int tun_set_iff(struct file *file, struct ifreq *ifr)
+static int tun_sk_alloc_init(struct tun_struct *tun, struct net_device *dev)
 {
 	struct sock *sk;
+
+	sk = sk_alloc(AF_UNSPEC, GFP_KERNEL, &tun_proto, 1);
+	if (!sk)
+		return -ENOMEM;
+
+	/* This ref count is for tun->sk. */
+	dev_hold(dev);
+	sock_init_data(&tun->socket, sk);
+	sk->sk_write_space = tun_sock_write_space;
+	sk->sk_destruct = tun_sock_destruct;
+	sk->sk_sndbuf = INT_MAX;
+	sk->sk_sleep = &tun->read_wait;
+
+	tun->sk = sk;
+	tun_sk(sk)->tun = tun;
+	return 0;
+}
+
+static int tun_set_iff(struct file *file, struct ifreq *ifr)
+{
 	struct tun_struct *tun;
 	struct net_device *dev;
 	int err;
@@ -856,22 +876,10 @@ static int tun_set_iff(struct file *file, struct ifreq *ifr)
 		get_random_bytes(tun->dev_addr + sizeof(u16), 4);
 		memset(tun->chr_filter, 0, sizeof tun->chr_filter);
 
-		err = -ENOMEM;
-		sk = sk_alloc(AF_UNSPEC, GFP_KERNEL, &tun_proto, 1);
-		if (!sk)
+		err = tun_sk_alloc_init(tun, dev);
+		if (err)
 			goto err_free_dev;
 
-		/* This ref count is for tun->sk. */
-		dev_hold(dev);
-		sock_init_data(&tun->socket, sk);
-		sk->sk_write_space = tun_sock_write_space;
-		sk->sk_destruct = tun_sock_destruct;
-		sk->sk_sndbuf = INT_MAX;
-		sk->sk_sleep = &tun->read_wait;
-
-		tun->sk = sk;
-		container_of(sk, struct tun_sock, sk)->tun = tun;
-
 		tun_net_init(dev);
 
 		if (strchr(dev->name, '%')) {
@@ -908,7 +916,7 @@ static int tun_set_iff(struct file *file, struct ifreq *ifr)
 	return 0;
 
  err_free_sk:
-	sock_put(sk);
+	sock_put(tun->sk);
  err_free_dev:
 	free_netdev(dev);
  failed:
-- 
1.6.0.2


