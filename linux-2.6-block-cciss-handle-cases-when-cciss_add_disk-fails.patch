From: Tomas Henzl <thenzl@redhat.com>
Date: Sun, 29 Aug 2010 15:49:23 -0400
Subject: [block] cciss: handle cases when cciss_add_disk fails
Message-id: <1283097002-3341-25-git-send-email-thenzl@redhat.com>
Patchwork-id: 27884
O-Subject: [RHEL6 PATCH 24/63] cciss: Handle cases when cciss_add_disk fails.
Bugzilla: 568830
RH-Acked-by: Neil Horman <nhorman@redhat.com>

Handle cases when cciss_add_disk fails.

diff --git a/drivers/block/cciss.c b/drivers/block/cciss.c
index 7fa3176..9a0ec7b 100644
--- a/drivers/block/cciss.c
+++ b/drivers/block/cciss.c
@@ -189,6 +189,7 @@ static int scan_thread(void *data);
 static void cciss_get_uid(int ctlr, int logvol, unsigned char *uid,
 	int buflen);
 static int check_for_unit_attention(ctlr_info_t *h, CommandList_struct *c);
+static void cciss_free_gendisk(ctlr_info_t *h, int drv_index);
 
 #ifdef CONFIG_PROC_FS
 static void cciss_procinit(int i);
@@ -1918,8 +1919,14 @@ static void cciss_update_drive_info(int ctlr, int drv_index, int first_time)
 
  	/* We only add the c*d0 node once, at driver init time */
  	/* and never remove it. */
- 	if (drv_index || first_time)
- 		cciss_add_disk(h, disk, drv_index);
+ 	if (drv_index || first_time) {
+ 		if (cciss_add_disk(h, disk, drv_index) != 0) {
+			cciss_free_gendisk(h, drv_index);
+			printk(KERN_WARNING "cciss:%d could not update "
+				"disk %d\n", h->ctlr, drv_index);
+			--h->num_luns;
+		}
+	}
 
 freeret:
 	kfree(inq_buff);
@@ -1955,6 +1962,12 @@ static int cciss_find_free_drive_index(int ctlr, int is_controller_node)
 	return -1;
 }
 
+static void cciss_free_gendisk(ctlr_info_t *h, int drv_index)
+{
+	put_disk(h->gendisk[drv_index]);
+	h->gendisk[drv_index] = NULL;
+}
+
 /* cciss_add_gendisk finds a free hba[]->drv structure
  * and allocates a gendisk if needed, and sets the lunid
  * in the drvinfo structure.   It returns the index into
@@ -1998,8 +2011,7 @@ static int cciss_add_gendisk(ctlr_info_t *h, unsigned char lunid[], int controll
 	return drv_index;
 
 err_free_disk:
-	put_disk(h->gendisk[drv_index]);
-	h->gendisk[drv_index] = NULL;
+	cciss_free_gendisk(h, drv_index);
 	return -1;
 }
 
@@ -2017,11 +2029,8 @@ static void cciss_add_controller_node(ctlr_info_t *h)
 		return;
 
 	drv_index = cciss_add_gendisk(h, CTLR_LUNID, 1);
-	if (drv_index == -1) {
-		printk(KERN_WARNING "cciss%d: could not "
-			"add disk 0.\n", h->ctlr);
-		return;
-	}
+	if (drv_index == -1)
+		goto error;
 	h->drv[drv_index].block_size = 512;
 	h->drv[drv_index].nr_blocks = 0;
 	h->drv[drv_index].heads = 0;
@@ -2033,7 +2042,13 @@ static void cciss_add_controller_node(ctlr_info_t *h)
 	memset(h->drv[drv_index].model, 0, sizeof(h->drv[drv_index].model));
 	memset(h->drv[drv_index].rev, 0, sizeof(h->drv[drv_index].rev));
 	disk = h->gendisk[drv_index];
-	cciss_add_disk(h, disk, drv_index);
+	if (cciss_add_disk(h, disk, drv_index) == 0)
+		return;
+	cciss_free_gendisk(h, drv_index);
+error:
+	printk(KERN_WARNING "cciss%d: could not "
+		"add disk 0.\n", h->ctlr);
+	return;
 }
 
 /* This function will add and remove logical drives from the Logical
