diff --git a/kernel/cpt/rst_process.c b/kernel/cpt/rst_process.c
index 3c69e0b..9e237b6 100644
--- a/kernel/cpt/rst_process.c
+++ b/kernel/cpt/rst_process.c
@@ -1935,7 +1935,7 @@ int rst_restore_process(struct cpt_context *ctx)
 			if (ctx->image_version < CPT_VERSION_9)
 				nsec *= TICK_NSEC;
 
-			val = ktime_add_ns(val, nsec - ctx->delta_nsec);
+			val = ktime_add_ns(val, nsec);
 			if (val.tv64 <= 0)
 				val.tv64 = NSEC_PER_USEC;
 			dprintk("rst itimer " CPT_FID " +%Ld %Lu\n", CPT_TID(tsk),
diff --git a/kernel/cpt/rst_undump.c b/kernel/cpt/rst_undump.c
index c8df4b8..ebc31bf 100644
--- a/kernel/cpt/rst_undump.c
+++ b/kernel/cpt/rst_undump.c
@@ -29,6 +29,7 @@
 #include <linux/virtinfoscp.h>
 #include <linux/compat.h>
 #include <linux/vzcalluser.h>
+#include <linux/posix-timers.h>
 #include <ub/beancounter.h>
 #ifdef CONFIG_X86
 #include <asm/desc.h>
@@ -348,6 +349,8 @@ static int hook(void *arg)
 	}
 
 	if (thread_group_leader(current)) {
+		cputime_t virt_exp, prof_exp;
+
 		current->signal->it_real_incr.tv64 = 0;
 		if (ctx->image_version >= CPT_VERSION_9) {
 			current->signal->it_real_incr =
@@ -358,8 +361,14 @@ static int hook(void *arg)
 		}
 		current->signal->it_prof_incr = ti->cpt_it_prof_incr;
 		current->signal->it_virt_incr = ti->cpt_it_virt_incr; 
-		current->signal->it_prof_expires = ti->cpt_it_prof_value;
-		current->signal->it_virt_expires = ti->cpt_it_virt_value;
+		current->signal->it_prof_expires = virt_exp = ti->cpt_it_prof_value;
+		current->signal->it_virt_expires = prof_exp = ti->cpt_it_virt_value;
+
+		if (!cputime_eq(virt_exp, cputime_zero))
+			set_process_cpu_timer(current, CPUCLOCK_VIRT, &virt_exp, NULL);
+
+		if (!cputime_eq(prof_exp, cputime_zero))
+			set_process_cpu_timer(current, CPUCLOCK_PROF, &prof_exp, NULL);
 	}
 
 	err = rst_clone_children(tobj, ctx);
diff --git a/kernel/posix-cpu-timers.c b/kernel/posix-cpu-timers.c
index f45da53..871312b 100644
--- a/kernel/posix-cpu-timers.c
+++ b/kernel/posix-cpu-timers.c
@@ -6,6 +6,7 @@
 #include <linux/posix-timers.h>
 #include <asm/uaccess.h>
 #include <linux/errno.h>
+#include <linux/module.h>
 
 static int check_clock(const clockid_t which_clock)
 {
@@ -1407,6 +1408,7 @@ void set_process_cpu_timer(struct task_struct *tsk, unsigned int clock_idx,
 		process_timer_rebalance(tsk, clock_idx, expires, now);
 	}
 }
+EXPORT_SYMBOL(set_process_cpu_timer);
 
 static long posix_cpu_clock_nanosleep_restart(struct restart_block *);
 
