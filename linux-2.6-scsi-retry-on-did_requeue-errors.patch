From: Mike Christie <mchristi@redhat.com>
Date: Wed, 10 Nov 2010 23:32:22 -0500
Subject: [scsi] retry on DID_REQUEUE errors
Message-id: <1289431942-7114-1-git-send-email-mchristi@redhat.com>
Patchwork-id: 29136
O-Subject: [PATCH RHEL 5.6] scsi: retry DID_REQUEUE errors
Bugzilla: 627836
RH-Acked-by: Rob Evers <revers@redhat.com>
RH-Acked-by: Mark Goodwin <mgoodwin@redhat.com>

From: Mike Christie <mchristi@redhat.com>

This is for BZ 627836.

DID_REQUEUE errors returned by a scsi LLD are fast-failed for
dm-multipath in the scsi ML when they could be retried. For cases
where this is caused by a  short-term I/O glitch (and an immediate
retry would succeed), this causes  unnecessary and excessive dm-multipath
failovers, logs full of nasty looking  messages and fencing with gfs
quorum devices. Retry is the default behaviour
on RHEL6 and upstream, but not for RHEL5 or earlier.

The behavior implemented in this patch is upstream. The
code is different due to us having patches that are not
upstream (and we have patches that are not upstream,
because I googed and thought they were going, but they
ended up not getting merged).

Patch was tested by customer. It was also tested by
us to verify it fixes a similar problem, because
we cannot replicate the exaxt same issue.


diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index 97f3d20..843da77 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -1466,7 +1466,7 @@ void scsi_eh_flush_done_q(struct list_head *done_q)
 		SCSI_LOG_ERROR_RECOVERY(3, printk("%s: flush"
 						  "attempt retry cmd: %p\n",
 						  current->comm, scmd));
-		scsi_attempt_requeue_command(scmd, SCSI_MLQUEUE_DIS_RETRY);
+		scsi_attempt_requeue_command(scmd, SCSI_MLQUEUE_EH_RETRY2);
 	}
 }
 EXPORT_SYMBOL(scsi_eh_flush_done_q);
diff --git a/include/scsi/scsi.h b/include/scsi/scsi.h
index 660cfc9..b21e02f 100644
--- a/include/scsi/scsi.h
+++ b/include/scsi/scsi.h
@@ -405,6 +405,8 @@ enum {
 		SCSI_IGN_ALLOWED,
 	SCSI_MLQUEUE_TARGET_COM_ERR	= (0x10 << SCSI_MLQUEUE_BUSY_SHIFT) |
 		SCSI_MLQUEUE_DIS_RETRY | SCSI_IGN_BLK_FAILFAST,
+	SCSI_MLQUEUE_EH_RETRY2		= (0x20 << SCSI_MLQUEUE_BUSY_SHIFT) |
+		SCSI_MLQUEUE_DIS_RETRY | SCSI_IGN_BLK_FAILFAST,
 };
 
 #define scsi_disposition_finish(dis) (dis & SCSI_MLQUEUE_DIS_FINISH)
