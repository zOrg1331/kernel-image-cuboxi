From: Jeff Layton <jlayton@redhat.com>
Date: Tue, 8 Jun 2010 12:40:53 -0400
Subject: [fs] force target reval when following LAST_BIND symlinks
Message-id: <1276000853-21014-1-git-send-email-jlayton@redhat.com>
Patchwork-id: 26031
O-Subject: [RHEL5.6 PATCH] BZ#571518: vfs: force reval of target when following
	LAST_BIND symlinks (try #7)
Bugzilla: 571518
RH-Acked-by: Steve Dickson <SteveD@redhat.com>
RH-Acked-by: Alexander Viro <aviro@redhat.com>

This patch is pretty much identical to the one that went upstream, and
into RHEL4 and RHEL6. It fixes a problem that occurs when opening a file
on an NFSv4 mount via a procfs-style symlink. This has been in my test
kernels for quite some time, fixes the reproducer for this problem and
hasn't caused any issues that I've seen.

-----------------------[snip]--------------------

procfs-style symlinks return a last_type of LAST_BIND without an actual
path string. This causes __follow_link to skip calling __vfs_follow_link
and so the dentry isn't revalidated.

This is a problem when the link target sits on NFSv4 as it depends on
the VFS to revalidate the dentry before using it on an open call. Ensure
that this occurs by forcing a revalidation of the target dentry of
LAST_BIND symlinks.

Signed-off-by: Jeff Layton <jlayton@redhat.com>
Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
Acked-by: Miklos Szeredi <mszeredi@suse.cz>
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/fs/namei.c b/fs/namei.c
index b50ccb9..79ff4ff 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -416,6 +416,46 @@ static struct dentry * cached_lookup(struct dentry * parent, struct qstr * name,
 }
 
 /*
+ * force_reval_path - force revalidation of a dentry
+ *
+ * In some situations the path walking code will trust dentries without
+ * revalidating them. This causes problems for filesystems that depend on
+ * d_revalidate to handle file opens (e.g. NFSv4). When FS_REVAL_DOT is set
+ * (which indicates that it's possible for the dentry to go stale), force
+ * a d_revalidate call before proceeding.
+ *
+ * Returns 0 if the revalidation was successful. If the revalidation fails,
+ * either return the error returned by d_revalidate or -ESTALE if the
+ * revalidation it just returned 0. If d_revalidate returns 0, we attempt to
+ * invalidate the dentry. It's up to the caller to handle putting references
+ * to the path if necessary.
+ */
+static int
+force_reval_path(struct nameidata *nd)
+{
+	int status;
+	struct dentry *dentry = nd->dentry;
+
+	/*
+	 * only check on filesystems where it's possible for the dentry to
+	 * become stale. It's assumed that if this flag is set then the
+	 * d_revalidate op will also be defined.
+	 */
+	if (!(dentry->d_sb->s_type->fs_flags & FS_REVAL_DOT))
+		return 0;
+
+	status = dentry->d_op->d_revalidate(dentry, nd);
+	if (status > 0)
+		return 0;
+
+	if (!status) {
+		d_invalidate(dentry);
+		status = -ESTALE;
+	}
+	return status;
+}
+
+/*
  * Short-cut version of permission(), for calling by
  * path_walk(), when dcache lock is held.  Combines parts
  * of permission() and generic_permission(), and tests ONLY for
@@ -616,6 +656,13 @@ static __always_inline int __do_follow_link(struct path *path, struct nameidata
 		error = 0;
 		if (s)
 			error = __vfs_follow_link(nd, s);
+		else if (nd->last_type == LAST_BIND) {
+			error = force_reval_path(nd);
+			if (error) {
+				dput(nd->dentry);
+				mntput(nd->mnt);
+			}
+		}
 		if (dentry->d_inode->i_op->put_link)
 			dentry->d_inode->i_op->put_link(dentry, nd, cookie);
 	}
