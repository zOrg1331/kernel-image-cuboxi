From: Prarit Bhargava <prarit@redhat.com>
Date: Fri, 27 Aug 2010 14:40:42 -0400
Subject: [pnp] reserve system board iomem and ioport resources
Message-id: <20100827144042.30401.82250.sendpatchset@prarit.bos.redhat.com>
Patchwork-id: 27840
O-Subject: [RHEL5 BZ 560540 V2] PNP: reserve system board iomem resources as
	well as ioport resources
Bugzilla: 560540
RH-Acked-by: Dean Nelson <dnelson@redhat.com>

Backport of linux-2.6 commit a8c78f7fb1571764f48b8af5459abdd2c66a765f and
a2b091dbfb355d0cd35756c6ace0988c9855f3f7.

(Please note that the upstream commit makes a comment about x86 boxes not
 having system board resources.  That is definitely no longer the case.)

Successfully tested by me.  For example, after adding this code we see the
following new entries in the iomem map:

[root@amd-dinar-05 kernel]# cat /proc/iomem  | grep pnp
c8000000-c8007fff : pnp 00:01
fec10000-fec1001f : pnp 00:09

(Thanks to dnelson for the suggestions for code cleanup and fixing a bug!)

Resolves BZ 560540.

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/pnp/system.c b/drivers/pnp/system.c
index d42015c..5af24b4 100644
--- a/drivers/pnp/system.c
+++ b/drivers/pnp/system.c
@@ -3,7 +3,8 @@
  *
  * Some code is based on pnpbios_core.c
  * Copyright 2002 Adam Belay <ambx1@neo.rr.com>
- *
+ * (c) Copyright 2007 Hewlett-Packard Development Company, L.P.
+ *	Bjorn Helgaas <bjorn.helgaas@hp.com>
  */
 
 #include <linux/pnp.h>
@@ -21,7 +22,7 @@ static const struct pnp_device_id pnp_dev_table[] = {
 	{	"",			0	}
 };
 
-static void reserve_ioport_range(char *pnpid, int start, int end)
+static void reserve_range(const char *pnpid, resource_size_t start, resource_size_t end, int port)
 {
 	struct resource *res;
 	char *regionid;
@@ -30,7 +31,10 @@ static void reserve_ioport_range(char *pnpid, int start, int end)
 	if ( regionid == NULL )
 		return;
 	snprintf(regionid, 16, "pnp %s", pnpid);
-	res = request_region(start,end-start+1,regionid);
+	if (port)
+		res = request_region(start, end-start+1, regionid);
+	else
+		res = request_mem_region(start, end-start+1, regionid);
 	if ( res == NULL )
 		kfree( regionid );
 	else
@@ -41,15 +45,16 @@ static void reserve_ioport_range(char *pnpid, int start, int end)
 	 * have double reservations.
 	 */
 	printk(KERN_INFO
-		"pnp: %s: ioport range 0x%x-0x%x %s reserved\n",
-		pnpid, start, end,
+		"pnp: %s: %s range 0x%llx-0x%llx %s reserved\n",
+		pnpid, port ? "ioport" : "iomem",
+                (unsigned long long)start, (unsigned long long)end,
 		NULL != res ? "has been" : "could not be"
 	);
 
 	return;
 }
 
-static void reserve_resources_of_dev( struct pnp_dev *dev )
+static void reserve_resources_of_dev(const struct pnp_dev *dev)
 {
 	int i;
 
@@ -75,13 +80,23 @@ static void reserve_resources_of_dev( struct pnp_dev *dev )
 			/* invalid endpoint */
 			/* Do nothing */
 			continue;
-		reserve_ioport_range(
+		reserve_range(
 			dev->dev.bus_id,
 			pnp_port_start(dev, i),
-			pnp_port_end(dev, i)
+			pnp_port_end(dev, i), 1
 		);
 	}
 
+	for (i = 0; i < PNP_MAX_MEM; i++) {
+		if (!((pnp_mem_flags(dev,i) &
+		    (IORESOURCE_MEM | IORESOURCE_UNSET | IORESOURCE_DISABLED))
+		     == IORESOURCE_MEM))
+			continue;
+
+		reserve_range(dev->dev.bus_id, pnp_mem_start(dev, i),
+			pnp_mem_end(dev, i), 0);
+	}
+
 	return;
 }
 
