Subject: [PATCH rh5] ubc: take held snapshot for showing in proc
From: Konstantin Khlebnikov <khlebnikov@parallels.com>
Date: Fri, 11 Feb 2011 16:45:28 +0300
To: "vzlin-dev@sw.ru" <vzlin-dev@sw.ru>
CC: Pavel Emelianov <xemul@parallels.com>
Message-ID: <20110211134528.26898.50388.stgit@localhost6>

fix "leak" of oomguarpages, physpages and privvmpages
after adding bached held pages counters.

https://jira.sw.ru/browse/PSBM-6788
https://jira.sw.ru/browse/PSBM-6843

Signed-off-by: Konstantin Khlebnikov <khlebnikov@openvz.org>
---
 include/ub/beancounter.h |    2 ++
 kernel/ub/ub_page_bc.c   |   24 ++++++++++++++++++++++++
 kernel/ub/ub_proc.c      |   17 ++++++++++++-----
 3 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/include/ub/beancounter.h b/include/ub/beancounter.h
index 6eb84e7..29ac108 100644
--- a/include/ub/beancounter.h
+++ b/include/ub/beancounter.h
@@ -533,6 +533,8 @@ static inline void uncharge_beancounter_notop(struct user_beancounter *ub,
 
 void ub_flush_held_pages(struct user_beancounter *ub);
 
+void ub_held_snapshot(struct user_beancounter *ub, unsigned long *held);
+
 #endif /* CONFIG_USER_RESOURCE */
 
 #ifndef CONFIG_USER_RSS_ACCOUNTING
diff --git a/kernel/ub/ub_page_bc.c b/kernel/ub/ub_page_bc.c
index 1dbb0cd..162f847 100644
--- a/kernel/ub/ub_page_bc.c
+++ b/kernel/ub/ub_page_bc.c
@@ -138,6 +138,30 @@ void ub_flush_held_pages(struct user_beancounter *ub)
 	set_held_pages(ub);
 }
 
+void ub_held_snapshot(struct user_beancounter *ub, unsigned long *held)
+{
+	unsigned long flags, pages, tmpfs, unused;
+	long long held_pages;
+	int cpu, res;
+
+	spin_lock_irqsave(&ub->ub_lock, flags);
+	tmpfs = ub->ub_tmpfs_respages;
+	unused = ub->ub_unused_privvmpages;
+	held_pages = ub->ub_held_pages;
+	for( res = 0 ; res < UB_RESOURCES ; res++ )
+		held[res] = ub->ub_parms[res].held;
+	spin_unlock_irqrestore(&ub->ub_lock, flags);
+
+	for_each_possible_cpu(cpu)
+		held_pages += per_cpu_ptr(ub->ub_percpu, cpu)->held_pages;
+	pages = max(0ll, held_pages) >> UB_PAGE_WEIGHT_SHIFT;
+
+	/* see set_held_pages() */
+	held[UB_PHYSPAGES] = pages + tmpfs;
+	held[UB_PRIVVMPAGES] = pages + unused + held[UB_SHMPAGES];
+	held[UB_OOMGUARPAGES] = held[UB_PHYSPAGES] + held[UB_SWAPPAGES];
+}
+
 /*
  * ++ and -- beyond are protected with pb_lock
  */
diff --git a/kernel/ub/ub_proc.c b/kernel/ub/ub_proc.c
index 505e067..a5b1cfc 100644
--- a/kernel/ub/ub_proc.c
+++ b/kernel/ub/ub_proc.c
@@ -41,7 +41,7 @@ static const char *res_fmt = "%10s  %-12s %20lu %20lu %20lu %20lu %20lu\n";
 #endif
 
 static void ub_show_res(struct seq_file *f, struct user_beancounter *ub,
-		int r, int show_uid)
+		int r, unsigned long held, int show_uid)
 {
 	int len;
 	char ub_uid[64];
@@ -54,7 +54,7 @@ static void ub_show_res(struct seq_file *f, struct user_beancounter *ub,
 		strcpy(ub_uid, "");
 
 	seq_printf(f, res_fmt, ub_uid, ub_rnames[r],
-			ub->ub_parms[r].held,
+			held,
 			ub->ub_parms[r].maxheld,
 			ub->ub_parms[r].barrier,
 			ub->ub_parms[r].limit,
@@ -64,14 +64,17 @@ static void ub_show_res(struct seq_file *f, struct user_beancounter *ub,
 static void __show_resources(struct seq_file *f, struct user_beancounter *ub,
 		int show_uid)
 {
+	unsigned long held[UB_RESOURCES];
 	int i;
 
+	ub_held_snapshot(ub, held);
+
 	for (i = 0; i < UB_RESOURCES_COMPAT; i++)
 		if (strcmp(ub_rnames[i], "dummy") != 0)
-			ub_show_res(f, ub, i, show_uid);
+			ub_show_res(f, ub, i, held[i], show_uid);
 
 	for (i = UB_RESOURCES_COMPAT; i < UB_RESOURCES; i++)
-		ub_show_res(f, ub, i, show_uid);
+		ub_show_res(f, ub, i, held[i], show_uid);
 }
 
 static int bc_resources_show(struct seq_file *f, void *v)
@@ -175,10 +178,14 @@ static struct bc_proc_entry bc_count_slab_entry = {
 
 static int ub_show(struct seq_file *f, void *v)
 {
+	struct user_beancounter *ub = v;
+	unsigned long held[UB_RESOURCES];
 	int i;
 
+	ub_held_snapshot(ub, held);
+
 	for (i = 0; i < UB_RESOURCES_COMPAT; i++)
-		ub_show_res(f, (struct user_beancounter *)v, i, 1);
+		ub_show_res(f, ub, i, held[i], 1);
 	return 0;
 }
 

