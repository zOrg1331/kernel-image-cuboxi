From: Dean Nelson <dnelson@redhat.com>
Date: Wed, 19 Jan 2011 03:14:58 -0500
Subject: [net] e1000: fix screaming IRQ
Message-id: <20110119031457.7619.13323.send-patch@localhost6.localdomain6>
Patchwork-id: 32698
O-Subject: [RHEL5.7 PATCH 1/2] e1000: fix screaming IRQ
Bugzilla: 651512
RH-Acked-by: David S. Miller <davem@redhat.com>
RH-Acked-by: John Linville <linville@redhat.com>
RH-Acked-by: John Feeney <jfeeney@redhat.com>
RH-Acked-by: Jiri Pirko <jpirko@redhat.com>

Resolves RHBZ 651512

Backport of:

commit ab08853fab2093e5c6f5de56827a4c93dce4b055
Author: Anupam Chanda <anupamc@vmware.com>
Date:   Sun Nov 21 09:54:21 2010 -0800

    e1000: fix screaming IRQ

    VMWare reports that the e1000 driver has a bug when bringing down the
    interface, such that interrupts are not disabled in the hardware but the
    driver stops reporting that it consumed the interrupt.

    The fix is to set the driver's "down" flag later in the routine,
    after all the timers and such have exited, preventing the interrupt
    handler from being called and exiting early without handling the
    interrupt.

    CC: Anupam Chanda <anupamc@vmware.com>
    CC: stable kernel <stable@kernel.org>
    Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>


diff --git a/drivers/net/e1000/e1000_main.c b/drivers/net/e1000/e1000_main.c
index 4d3bee7..d839e38 100644
--- a/drivers/net/e1000/e1000_main.c
+++ b/drivers/net/e1000/e1000_main.c
@@ -37,7 +37,7 @@ static char e1000_driver_string[] = "Intel(R) PRO/1000 Network Driver";
 #else
 #define DRIVERNAPI "-NAPI"
 #endif
-#define DRV_VERSION "7.3.21-k4-2"DRIVERNAPI
+#define DRV_VERSION "7.3.21-k4-3"DRIVERNAPI
 const char e1000_driver_version[] = DRV_VERSION;
 static const char e1000_copyright[] = "Copyright (c) 1999-2006 Intel Corporation.";
 
@@ -610,9 +610,6 @@ void e1000_down(struct e1000_adapter *adapter)
 	struct net_device *netdev = adapter->netdev;
 	u32 rctl, tctl;
 
-	/* signal that we're down so the interrupt handler does not
-	 * reschedule our watchdog timer */
-	set_bit(__E1000_DOWN, &adapter->flags);
 
 	/* disable receives in the hardware */
 	rctl = er32(RCTL);
@@ -635,6 +632,13 @@ void e1000_down(struct e1000_adapter *adapter)
 #endif
 	e1000_irq_disable(adapter);
 
+	/*
+	 * Setting DOWN must be after irq_disable to prevent
+	 * a screaming interrupt.  Setting DOWN also prevents
+	 * timers and tasks from rescheduling.
+	 */
+	set_bit(__E1000_DOWN, &adapter->flags);
+
 	del_timer_sync(&adapter->tx_fifo_stall_timer);
 	del_timer_sync(&adapter->watchdog_timer);
 	del_timer_sync(&adapter->phy_info_timer);
