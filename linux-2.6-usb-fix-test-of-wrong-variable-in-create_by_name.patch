From: Don Howard <dhoward@redhat.com>
Date: Tue, 17 Aug 2010 18:33:36 -0400
Subject: [usb] fix test of wrong variable in create_by_name
Message-id: <alpine.LRH.2.00.1008171031450.13835@localhost.localdomain>
Patchwork-id: 27674
O-Subject: [RHEL5.6 patch] BZ594635 Testing the wrong variable in
	create_by_name()
Bugzilla: 594635
RH-Acked-by: Danny Feng <dfeng@redhat.com>
RH-Acked-by: Don Zickus <dzickus@redhat.com>
RH-Acked-by: Jerome Marchand <jmarchan@redhat.com>

Backport of upstream commits:

commit b338cc8207eae46640a8d534738fda7b5e48511d
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Apr 22 12:05:35 2010 +0200

    security: testing the wrong variable in create_by_name()

    There is a typo here.  We should be testing "*dentry" instead of
    "dentry".  If "*dentry" is an ERR_PTR, it gets dereferenced in either
    mkdir() or create() which would cause an OOPs.

    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: James Morris <jmorris@namei.org>

commit fa7fe7af146a7b613e36a311eefbbfb5555325d1
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Apr 22 12:00:52 2010 +0200

    USB: fix testing the wrong variable in fs_create_by_name()

    There is a typo here.  We should be testing "*dentry" which was just
    assigned instead of "dentry".  This could result in dereferencing an
    ERR_PTR inside either usbfs_mkdir() or usbfs_create().

    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 7bb0386f102ece8819182ccf7fffe8bbebc32b19
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Thu Oct 19 12:24:42 2006 +0900

    debugfs: check return value correctly

    The return value is stored in "*dentry", not in "dentry".

    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Tested in rhts/no regressions noted.
Fixes bz594635.

--
-Don
dhoward@redhat.com

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/drivers/usb/core/inode.c b/drivers/usb/core/inode.c
index ccba5bf..732fd69 100644
--- a/drivers/usb/core/inode.c
+++ b/drivers/usb/core/inode.c
@@ -480,13 +480,13 @@ static int fs_create_by_name (const char *name, mode_t mode,
 	*dentry = NULL;
 	mutex_lock(&parent->d_inode->i_mutex);
 	*dentry = lookup_one_len(name, parent, strlen(name));
-	if (!IS_ERR(dentry)) {
+	if (!IS_ERR(*dentry)) {
 		if ((mode & S_IFMT) == S_IFDIR)
 			error = usbfs_mkdir (parent->d_inode, *dentry, mode);
 		else 
 			error = usbfs_create (parent->d_inode, *dentry, mode);
 	} else
-		error = PTR_ERR(dentry);
+		error = PTR_ERR(*dentry);
 	mutex_unlock(&parent->d_inode->i_mutex);
 
 	return error;
diff --git a/fs/debugfs/inode.c b/fs/debugfs/inode.c
index 6ad1b27..1369374 100644
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -147,14 +147,14 @@ static int debugfs_create_by_name(const char *name, mode_t mode,
 	*dentry = NULL;
 	mutex_lock(&parent->d_inode->i_mutex);
 	*dentry = lookup_one_len(name, parent, strlen(name));
-	if (!IS_ERR(dentry)) {
+	if (!IS_ERR(*dentry)) {
 		if ((mode & S_IFMT) == S_IFDIR)
 			error = debugfs_mkdir(parent->d_inode, *dentry, mode);
 		else 
 			error = debugfs_create(parent->d_inode, *dentry, mode);
 		dput(*dentry);
 	} else
-		error = PTR_ERR(dentry);
+		error = PTR_ERR(*dentry);
 	mutex_unlock(&parent->d_inode->i_mutex);
 
 	return error;
diff --git a/security/inode.c b/security/inode.c
index 49ee515..54bc3ff 100644
--- a/security/inode.c
+++ b/security/inode.c
@@ -172,13 +172,13 @@ static int create_by_name(const char *name, mode_t mode,
 
 	mutex_lock(&parent->d_inode->i_mutex);
 	*dentry = lookup_one_len(name, parent, strlen(name));
-	if (!IS_ERR(dentry)) {
+	if (!IS_ERR(*dentry)) {
 		if ((mode & S_IFMT) == S_IFDIR)
 			error = mkdir(parent->d_inode, *dentry, mode);
 		else
 			error = create(parent->d_inode, *dentry, mode);
 	} else
-		error = PTR_ERR(dentry);
+		error = PTR_ERR(*dentry);
 	mutex_unlock(&parent->d_inode->i_mutex);
 
 	return error;
