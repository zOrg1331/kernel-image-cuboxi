From: Prarit Bhargava <prarit@redhat.com>
Subject: [RHEL5 PATCH]: BZ 184896 PAL_GET_PSTATE implementation
Date: Fri, 1 Dec 2006 14:00:19 -0500
Bugzilla: 184896
Message-Id: <20061201190019.9129.53008.sendpatchset@prarit.boston.redhat.com>
Changelog: ia64: PAL_GET_PSTATE implementation


PAL_GET_PSTATE accepts a type argument to return different kinds of
frequency information.
Refer: Intel ItaniumÂ®Architecture Software Developer's Manual -
Volume 2: System Architecture, Revision 2.2
(http://developer.intel.com/design/itanium/manuals/245318.htm)

Add the support for type argument and use Instantaneous frequency
in the acpi driver.

Also fix a bug, where in return value of PAL_GET_PSTATE was getting compared
with 'control' bits instead of 'status' bits.

Fixes BZ 184896.

Tested on an early alpha Montvale by Intel.

Signed-off-by: Venkatesh Pallipadi <venkatesh.pallipadi@intel.com>

diff -purN linux-2.6.18/arch/ia64/kernel/cpufreq/acpi-cpufreq.c linux-2.6.18-new/arch/ia64/kernel/cpufreq/acpi-cpufreq.c
--- linux-2.6.18/arch/ia64/kernel/cpufreq/acpi-cpufreq.c	2006-09-19 20:42:06.000000000 -0700
+++ linux-2.6.18-new/arch/ia64/kernel/cpufreq/acpi-cpufreq.c	2006-10-10 09:58:32.000000000 -0700
@@ -68,7 +68,8 @@ processor_get_pstate (
 
 	dprintk("processor_get_pstate\n");
 
-	retval = ia64_pal_get_pstate(&pstate_index);
+	retval = ia64_pal_get_pstate(&pstate_index,
+	                             PAL_GET_PSTATE_TYPE_INSTANT);
 	*value = (u32) pstate_index;
 
 	if (retval)
@@ -91,7 +92,7 @@ extract_clock (
 	dprintk("extract_clock\n");
 
 	for (i = 0; i < data->acpi_data.state_count; i++) {
-		if (value >= data->acpi_data.states[i].control)
+		if (value == data->acpi_data.states[i].status)
 			return data->acpi_data.states[i].core_frequency;
 	}
 	return data->acpi_data.states[i-1].core_frequency;
@@ -117,11 +118,7 @@ processor_get_freq (
 		goto migrate_end;
 	}
 
-	/*
-	 * processor_get_pstate gets the average frequency since the
-	 * last get. So, do two PAL_get_freq()...
-	 */
-	ret = processor_get_pstate(&value);
+	/* processor_get_pstate gets the instantaneous frequency */
 	ret = processor_get_pstate(&value);
 
 	if (ret) {
diff -purN linux-2.6.18/include/asm-ia64/pal.h linux-2.6.18-new/include/asm-ia64/pal.h
--- linux-2.6.18/include/asm-ia64/pal.h	2006-09-19 20:42:06.000000000 -0700
+++ linux-2.6.18-new/include/asm-ia64/pal.h	2006-10-10 09:59:47.000000000 -0700
@@ -79,6 +79,11 @@
 #define PAL_GET_PSTATE		262	/* get the current P-state */
 #define PAL_SET_PSTATE		263	/* set the P-state */
 
+#define PAL_GET_PSTATE_TYPE_LASTSET	(0)
+#define PAL_GET_PSTATE_TYPE_AVGANDRESET	(1)
+#define PAL_GET_PSTATE_TYPE_AVGNORESET	(2)
+#define PAL_GET_PSTATE_TYPE_INSTANT	(3)
+
 #ifndef __ASSEMBLY__
 
 #include <linux/types.h>
@@ -1116,10 +1121,10 @@ ia64_pal_halt_info (pal_power_mgmt_info_
 
 /* Get the current P-state information */
 static inline s64
-ia64_pal_get_pstate (u64 *pstate_index)
+ia64_pal_get_pstate (u64 *pstate_index, unsigned long type)
 {
 	struct ia64_pal_retval iprv;
-	PAL_CALL_STK(iprv, PAL_GET_PSTATE, 0, 0, 0);
+	PAL_CALL_STK(iprv, PAL_GET_PSTATE, type, 0, 0);
 	*pstate_index = iprv.v0;
 	return iprv.status;
 }
-

