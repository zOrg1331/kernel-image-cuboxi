From: Radim Krcmar <rkrcmar@redhat.com>
Date: Thu, 16 Sep 2010 17:32:06 -0400
Subject: [virt] xen: fix crashing of x86 hvm guest on x86_64
Message-id: <1284658326-9302-1-git-send-email-rkrcmar@redhat.com>
Patchwork-id: 28265
O-Subject: [RHEL5.6 PATCH V2] xen: fix crashing of x86 hvm guest on x86_64
Bugzilla: 605697
RH-Acked-by: Andrew Jones <drjones@redhat.com>
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>

V2 tries to make the patch nicer by removing ifdefs and changing structure,
drawback is it now affects all kernels, but impact is minimal.
Reworded warning message now fits into terminal width.

Not yet tested, but if I do not spam this thread with apologies again, it's ok.

rpm: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=2767353

bug: https://bugzilla.redhat.com/show_bug.cgi?id=605697

The pv on hvm ballooning driver crashes guest if memory changes are not
supported in hypervisor.

The patch is inspired by oracle solution of bug 7556514: check if hypervisor
returns -ENOSYS on memory reservation change request. This must be done as a
separate call with zero change, because the user can (very unlikely) request
a change of -ENOSYS size, which can not be distinguised from failure.

diff --git a/drivers/xen/balloon/balloon.c b/drivers/xen/balloon/balloon.c
index 62263e5..e8b640f 100644
--- a/drivers/xen/balloon/balloon.c
+++ b/drivers/xen/balloon/balloon.c
@@ -93,6 +93,9 @@ static unsigned long frame_list[PAGE_SIZE / sizeof(unsigned long)];
 /* VM /proc information for memory */
 extern unsigned long totalram_pages;
 
+/* We check if hypervisor supports memory reservation change; safe default */
+static int mem_change_supported = 0;
+
 #ifndef MODULE
 extern unsigned long totalhigh_pages;
 #define inc_totalhigh_pages() (totalhigh_pages++)
@@ -350,6 +353,9 @@ static void balloon_process(void *unused)
 	int need_sleep = 0;
 	long credit;
 
+	if (!mem_change_supported)
+		return;
+
 	down(&balloon_mutex);
 
 	do {
@@ -372,6 +378,25 @@ static void balloon_process(void *unused)
 	up(&balloon_mutex);
 }
 
+static int hypervisor_mem_decrease_reservation_supported(void) {
+	int ret;
+	struct xen_memory_reservation reservation = {
+		.nr_extents   = 0,
+		.extent_order = 0,
+		.domid        = DOMID_SELF
+	};
+
+	ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation, &reservation);
+	switch (ret) {
+	case 0:
+		return 1;
+	case -ENOSYS:
+	default:
+		WPRINTK("ballooning: changing reservation is not supported\n");
+		return 0;
+	}
+}
+
 /* Resets the Xen limit, sets new target, and kicks off processing. */
 static void set_new_target(unsigned long target)
 {
@@ -427,6 +452,9 @@ static int balloon_write(struct file *file, const char __user *buffer,
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
+	if (!mem_change_supported)
+		return -ENOSYS;
+
 	if (count <= 1)
 		return -EBADMSG; /* runt */
 	if (count > sizeof(memstring))
@@ -516,7 +544,9 @@ static int __init balloon_init(void)
 	xenstore_notifier.notifier_call = balloon_init_watcher;
 
 	register_xenstore_notifier(&xenstore_notifier);
-    
+
+	mem_change_supported = hypervisor_mem_decrease_reservation_supported();
+
 	return 0;
 }
 
