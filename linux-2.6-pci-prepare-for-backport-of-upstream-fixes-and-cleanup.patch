From: Dean Nelson <dnelson@redhat.com>
Date: Wed, 26 May 2010 13:17:02 -0400
Subject: [pci] prepare for backport of upstream fixes and cleanup
Message-id: <20100526131702.5326.89065.send-patch@localhost.localdomain>
Patchwork-id: 25809
O-Subject: [RHEL5.6 PATCH 1/4] PCI: prepare for backport of upstream fixes and
	cleanup
Bugzilla: 578492
RH-Acked-by: Prarit Bhargava <prarit@redhat.com>
RH-Acked-by: Don Dutile <ddutile@redhat.com>

To make the backport of the upstream patches that actually resolve RHBZ 578492
easier...

Remove erroneous tabs and spaces that were inadvertantly added by the RHEL5
commit 08bdf4eb32447e7b8ea5a96e35151470cdc504ab when backporting the following
upstream commit:
http://git.kernel.org/linus/d556ad4bbe75faf17b239e151a9f003322b2e851

Backport the first part of the following upstream commit:
http://git.kernel.org/linus/b7b095c154c50ee753832bbf78e8690c492fc8f6


diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index e378aef..c9b4b18 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -1620,9 +1620,9 @@ EXPORT_SYMBOL_GPL(pci_reset_function);
 int
 pcix_get_max_mmrbc(struct pci_dev *dev)
 {
-	int ret, err, cap;
+	int err, cap;
 	u32 stat;
-	
+
 	cap = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!cap)
 		return -EINVAL;
@@ -1631,9 +1631,7 @@ pcix_get_max_mmrbc(struct pci_dev *dev)
 	if (err)
 		return -EINVAL;
 
-	ret = (stat & PCI_X_STATUS_MAX_READ) >> 12;
-
-	return ret;
+	return (stat & PCI_X_STATUS_MAX_READ) >> 12;
 }
 EXPORT_SYMBOL(pcix_get_max_mmrbc);
 
@@ -1649,15 +1647,15 @@ pcix_get_mmrbc(struct pci_dev *dev)
 {
 	int ret, cap;
 	u32 cmd;
-	
+
 	cap = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!cap)
 		return -EINVAL;
-	
+
 	ret = pci_read_config_dword(dev, cap + PCI_X_CMD, &cmd);
 	if (!ret)
 		ret = 512 << ((cmd & PCI_X_CMD_MAX_READ) >> 2);
-	
+
 	return ret;
 }
 EXPORT_SYMBOL(pcix_get_mmrbc);
@@ -1676,33 +1674,33 @@ pcix_set_mmrbc(struct pci_dev *dev, int mmrbc)
 {
 	int cap, err = -EINVAL;
 	u32 stat, cmd, v, o;
-		
+
 	if (mmrbc < 512 || mmrbc > 4096 || (mmrbc & (mmrbc-1)))
 		goto out;
-	
+
 	v = ffs(mmrbc) - 10;
-	
+
 	cap = pci_find_capability(dev, PCI_CAP_ID_PCIX);
 	if (!cap)
 		goto out;
-	
+
 	err = pci_read_config_dword(dev, cap + PCI_X_STATUS, &stat);
 	if (err)
 		goto out;
-	
+
 	if (v > (stat & PCI_X_STATUS_MAX_READ) >> 21)
 		return -E2BIG;
-	
+
 	err = pci_read_config_dword(dev, cap + PCI_X_CMD, &cmd);
 	if (err)
 		goto out;
-	
+
 	o = (cmd & PCI_X_CMD_MAX_READ) >> 2;
 	if (o != v) {
-		if (v > o && dev->bus && 
+		if (v > o && dev->bus &&
 		   (dev->bus->bus_flags & PCI_BUS_FLAGS_NO_MMRBC))
 			return -EIO;
-		
+
 		cmd &= ~PCI_X_CMD_MAX_READ;
 		cmd |= v << 2;
 		err = pci_write_config_dword(dev, cap + PCI_X_CMD, cmd);
@@ -1749,12 +1747,12 @@ pcie_set_readrq(struct pci_dev *dev, int rq)
 {
 	int cap, err = -EINVAL;
 	u16 ctl, v;
-	
+
 	if (rq < 128 || rq > 4096 || (rq & (rq-1)))
 		goto out;
-	
+
 	v = (ffs(rq) - 8) << 12;
-	
+
 	cap = pci_find_capability(dev, PCI_CAP_ID_EXP);
 	if (!cap)
 		goto out;
@@ -1762,13 +1760,13 @@ pcie_set_readrq(struct pci_dev *dev, int rq)
 	err = pci_read_config_word(dev, cap + PCI_EXP_DEVCTL, &ctl);
 	if (err)
 		goto out;
-	
+
 	if ((ctl & PCI_EXP_DEVCTL_READRQ) != v) {
 		ctl &= ~PCI_EXP_DEVCTL_READRQ;
 		ctl |= v;
 		err = pci_write_config_dword(dev, cap + PCI_EXP_DEVCTL, ctl);
 	}
-	
+
 out:
 	return err;
 }
