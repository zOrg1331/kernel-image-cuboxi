From: "Theodore Ts'o" <tytso@mit.edu>

The following patches reduce the size of the VFS inode structure by 28 bytes
on a UP x86.  (It would be more on an x86_64 system).  This is a 10% reduction
in the inode size on a UP kernel that is configured in a production mode
(i.e., with no spinlock or other debugging functions enabled; if you want to
save memory taken up by in-core inodes, the first thing you should do is
disable the debugging options; they are responsible for a huge amount of bloat
in the VFS inode structure).



This patch:

The filesystem or device-specific pointer in the inode is inside a union,
which is pretty pointless given that all 30+ users of this field have been
using the void pointer.  Get rid of the union and rename it to i_private, with
a comment to explain who is allowed to use the void pointer.  This is just a
cleanup, but it allows us to reuse the union 'u' for something something where
the union will actually be used.

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Andrew Morton <akpm@osdl.org>
---

 arch/powerpc/platforms/cell/spufs/inode.c      |    2 
 arch/s390/hypfs/inode.c                        |    6 +-
 arch/s390/kernel/debug.c                       |    2 
 block/blktrace.c                               |    2 
 drivers/i2c/chips/tps65010.c                   |    2 
 drivers/infiniband/hw/ipath/ipath_fs.c         |   12 ++---
 drivers/infiniband/ulp/ipoib/ipoib_fs.c        |    4 -
 drivers/misc/ibmasm/ibmasmfs.c                 |   16 +++----
 drivers/net/irda/vlsi_ir.h                     |    2 
 drivers/net/wireless/bcm43xx/bcm43xx_debugfs.c |    2 
 drivers/oprofile/oprofilefs.c                  |   10 ++--
 drivers/pci/hotplug/cpqphp_sysfs.c             |    2 
 drivers/usb/core/devio.c                       |    2 
 drivers/usb/core/inode.c                       |    6 +-
 drivers/usb/gadget/inode.c                     |    6 +-
 drivers/usb/host/isp116x-hcd.c                 |    2 
 drivers/usb/host/uhci-debug.c                  |    2 
 drivers/usb/mon/mon_stat.c                     |    2 
 drivers/usb/mon/mon_text.c                     |    4 -
 fs/autofs/inode.c                              |    2 
 fs/autofs/symlink.c                            |    2 
 fs/binfmt_misc.c                               |    8 +--
 fs/debugfs/file.c                              |    4 -
 fs/debugfs/inode.c                             |    4 -
 fs/devpts/inode.c                              |    4 -
 fs/dlm/debug_fs.c                              |    2 
 fs/freevxfs/vxfs.h                             |    2 
 fs/freevxfs/vxfs_inode.c                       |    4 -
 fs/fuse/control.c                              |    6 +-
 fs/gfs2/inode.c                                |    2 
 fs/gfs2/meta_io.c                              |    2 
 fs/gfs2/ops_super.c                            |    6 +-
 fs/inode.c                                     |    2 
 fs/jffs/inode-v23.c                            |   34 +++++++--------
 fs/libfs.c                                     |    2 
 fs/ocfs2/dlmglue.c                             |    2 
 include/linux/fs.h                             |    4 -
 kernel/relay.c                                 |    2 
 security/inode.c                               |    8 +--
 39 files changed, 93 insertions(+), 95 deletions(-)

diff -puN arch/powerpc/platforms/cell/spufs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private arch/powerpc/platforms/cell/spufs/inode.c
--- a/arch/powerpc/platforms/cell/spufs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/arch/powerpc/platforms/cell/spufs/inode.c
@@ -120,7 +120,7 @@ spufs_new_file(struct super_block *sb, s
 	ret = 0;
 	inode->i_op = &spufs_file_iops;
 	inode->i_fop = fops;
-	inode->u.generic_ip = SPUFS_I(inode)->i_ctx = get_spu_context(ctx);
+	inode->i_private = SPUFS_I(inode)->i_ctx = get_spu_context(ctx);
 	d_add(dentry, inode);
 out:
 	return ret;
diff -puN arch/s390/hypfs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private arch/s390/hypfs/inode.c
--- a/arch/s390/hypfs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/arch/s390/hypfs/inode.c
@@ -104,13 +104,13 @@ static struct inode *hypfs_make_inode(st
 
 static void hypfs_drop_inode(struct inode *inode)
 {
-	kfree(inode->u.generic_ip);
+	kfree(inode->i_private);
 	generic_delete_inode(inode);
 }
 
 static int hypfs_open(struct inode *inode, struct file *filp)
 {
-	char *data = filp->f_dentry->d_inode->u.generic_ip;
+	char *data = filp->f_dentry->d_inode->i_private;
 	struct hypfs_sb_info *fs_info;
 
 	if (filp->f_mode & FMODE_WRITE) {
@@ -350,7 +350,7 @@ static struct dentry *hypfs_create_file(
 		parent->d_inode->i_nlink++;
 	} else
 		BUG();
-	inode->u.generic_ip = data;
+	inode->i_private = data;
 	d_instantiate(dentry, inode);
 	dget(dentry);
 	return dentry;
diff -puN arch/s390/kernel/debug.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private arch/s390/kernel/debug.c
--- a/arch/s390/kernel/debug.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/arch/s390/kernel/debug.c
@@ -603,7 +603,7 @@ debug_open(struct inode *inode, struct f
 	debug_info_t *debug_info, *debug_info_snapshot;
 
 	down(&debug_lock);
-	debug_info = (struct debug_info*)file->f_dentry->d_inode->u.generic_ip;
+	debug_info = file->f_dentry->d_inode->i_private;
 	/* find debug view */
 	for (i = 0; i < DEBUG_MAX_VIEWS; i++) {
 		if (!debug_info->views[i])
diff -puN block/blktrace.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private block/blktrace.c
--- a/block/blktrace.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/block/blktrace.c
@@ -214,7 +214,7 @@ static int blk_trace_remove(request_queu
 
 static int blk_dropped_open(struct inode *inode, struct file *filp)
 {
-	filp->private_data = inode->u.generic_ip;
+	filp->private_data = inode->i_private;
 
 	return 0;
 }
diff -puN drivers/i2c/chips/tps65010.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/i2c/chips/tps65010.c
--- a/drivers/i2c/chips/tps65010.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/i2c/chips/tps65010.c
@@ -306,7 +306,7 @@ static int dbg_show(struct seq_file *s, 
 
 static int dbg_tps_open(struct inode *inode, struct file *file)
 {
-	return single_open(file, dbg_show, inode->u.generic_ip);
+	return single_open(file, dbg_show, inode->i_private);
 }
 
 static struct file_operations debug_fops = {
diff -puN drivers/infiniband/hw/ipath/ipath_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/infiniband/hw/ipath/ipath_fs.c
--- a/drivers/infiniband/hw/ipath/ipath_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/infiniband/hw/ipath/ipath_fs.c
@@ -64,7 +64,7 @@ static int ipathfs_mknod(struct inode *d
 	inode->i_blksize = PAGE_CACHE_SIZE;
 	inode->i_blocks = 0;
 	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;
-	inode->u.generic_ip = data;
+	inode->i_private = data;
 	if ((mode & S_IFMT) == S_IFDIR) {
 		inode->i_op = &simple_dir_inode_operations;
 		inode->i_nlink++;
@@ -119,7 +119,7 @@ static ssize_t atomic_counters_read(stru
 	u16 i;
 	struct ipath_devdata *dd;
 
-	dd = file->f_dentry->d_inode->u.generic_ip;
+	dd = file->f_dentry->d_inode->i_private;
 
 	for (i = 0; i < NUM_COUNTERS; i++)
 		counters[i] = ipath_snap_cntr(dd, i);
@@ -139,7 +139,7 @@ static ssize_t atomic_node_info_read(str
 	struct ipath_devdata *dd;
 	u64 guid;
 
-	dd = file->f_dentry->d_inode->u.generic_ip;
+	dd = file->f_dentry->d_inode->i_private;
 
 	guid = be64_to_cpu(dd->ipath_guid);
 
@@ -178,7 +178,7 @@ static ssize_t atomic_port_info_read(str
 	u32 tmp, tmp2;
 	struct ipath_devdata *dd;
 
-	dd = file->f_dentry->d_inode->u.generic_ip;
+	dd = file->f_dentry->d_inode->i_private;
 
 	/* so we only initialize non-zero fields. */
 	memset(portinfo, 0, sizeof portinfo);
@@ -325,7 +325,7 @@ static ssize_t flash_read(struct file *f
 		goto bail;
 	}
 
-	dd = file->f_dentry->d_inode->u.generic_ip;
+	dd = file->f_dentry->d_inode->i_private;
 	if (ipath_eeprom_read(dd, pos, tmp, count)) {
 		ipath_dev_err(dd, "failed to read from flash\n");
 		ret = -ENXIO;
@@ -381,7 +381,7 @@ static ssize_t flash_write(struct file *
 		goto bail_tmp;
 	}
 
-	dd = file->f_dentry->d_inode->u.generic_ip;
+	dd = file->f_dentry->d_inode->i_private;
 	if (ipath_eeprom_write(dd, pos, tmp, count)) {
 		ret = -ENXIO;
 		ipath_dev_err(dd, "failed to write to flash\n");
diff -puN drivers/infiniband/ulp/ipoib/ipoib_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/infiniband/ulp/ipoib/ipoib_fs.c
--- a/drivers/infiniband/ulp/ipoib/ipoib_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/infiniband/ulp/ipoib/ipoib_fs.c
@@ -141,7 +141,7 @@ static int ipoib_mcg_open(struct inode *
 		return ret;
 
 	seq = file->private_data;
-	seq->private = inode->u.generic_ip;
+	seq->private = inode->i_private;
 
 	return 0;
 }
@@ -247,7 +247,7 @@ static int ipoib_path_open(struct inode 
 		return ret;
 
 	seq = file->private_data;
-	seq->private = inode->u.generic_ip;
+	seq->private = inode->i_private;
 
 	return 0;
 }
diff -puN drivers/misc/ibmasm/ibmasmfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/misc/ibmasm/ibmasmfs.c
--- a/drivers/misc/ibmasm/ibmasmfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/misc/ibmasm/ibmasmfs.c
@@ -175,7 +175,7 @@ static struct dentry *ibmasmfs_create_fi
 	}
 
 	inode->i_fop = fops;
-	inode->u.generic_ip = data;
+	inode->i_private = data;
 
 	d_add(dentry, inode);
 	return dentry;
@@ -244,7 +244,7 @@ static int command_file_open(struct inod
 {
 	struct ibmasmfs_command_data *command_data;
 
-	if (!inode->u.generic_ip)
+	if (!inode->i_private)
 		return -ENODEV;
 
 	command_data = kmalloc(sizeof(struct ibmasmfs_command_data), GFP_KERNEL);
@@ -252,7 +252,7 @@ static int command_file_open(struct inod
 		return -ENOMEM;
 
 	command_data->command = NULL;
-	command_data->sp = inode->u.generic_ip;
+	command_data->sp = inode->i_private;
 	file->private_data = command_data;
 	return 0;
 }
@@ -351,10 +351,10 @@ static int event_file_open(struct inode 
 	struct ibmasmfs_event_data *event_data;
 	struct service_processor *sp; 
 
-	if (!inode->u.generic_ip)
+	if (!inode->i_private)
 		return -ENODEV;
 
-	sp = inode->u.generic_ip;
+	sp = inode->i_private;
 
 	event_data = kmalloc(sizeof(struct ibmasmfs_event_data), GFP_KERNEL);
 	if (!event_data)
@@ -439,14 +439,14 @@ static int r_heartbeat_file_open(struct 
 {
 	struct ibmasmfs_heartbeat_data *rhbeat;
 
-	if (!inode->u.generic_ip)
+	if (!inode->i_private)
 		return -ENODEV;
 
 	rhbeat = kmalloc(sizeof(struct ibmasmfs_heartbeat_data), GFP_KERNEL);
 	if (!rhbeat)
 		return -ENOMEM;
 
-	rhbeat->sp = (struct service_processor *)inode->u.generic_ip;
+	rhbeat->sp = inode->i_private;
 	rhbeat->active = 0;
 	ibmasm_init_reverse_heartbeat(rhbeat->sp, &rhbeat->heartbeat);
 	file->private_data = rhbeat;
@@ -508,7 +508,7 @@ static ssize_t r_heartbeat_file_write(st
 
 static int remote_settings_file_open(struct inode *inode, struct file *file)
 {
-	file->private_data = inode->u.generic_ip;
+	file->private_data = inode->i_private;
 	return 0;
 }
 
diff -puN drivers/net/irda/vlsi_ir.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/net/irda/vlsi_ir.h
--- a/drivers/net/irda/vlsi_ir.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/net/irda/vlsi_ir.h
@@ -58,7 +58,7 @@ typedef void irqreturn_t;
 
 /* PDE() introduced in 2.5.4 */
 #ifdef CONFIG_PROC_FS
-#define PDE(inode) ((inode)->u.generic_ip)
+#define PDE(inode) ((inode)->i_private)
 #endif
 
 /* irda crc16 calculation exported in 2.5.42 */
diff -puN drivers/net/wireless/bcm43xx/bcm43xx_debugfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/net/wireless/bcm43xx/bcm43xx_debugfs.c
--- a/drivers/net/wireless/bcm43xx/bcm43xx_debugfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/net/wireless/bcm43xx/bcm43xx_debugfs.c
@@ -54,7 +54,7 @@ static ssize_t write_file_dummy(struct f
 
 static int open_file_generic(struct inode *inode, struct file *file)
 {
-	file->private_data = inode->u.generic_ip;
+	file->private_data = inode->i_private;
 	return 0;
 }
 
diff -puN drivers/oprofile/oprofilefs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/oprofile/oprofilefs.c
--- a/drivers/oprofile/oprofilefs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/oprofile/oprofilefs.c
@@ -110,8 +110,8 @@ static ssize_t ulong_write_file(struct f
 
 static int default_open(struct inode * inode, struct file * filp)
 {
-	if (inode->u.generic_ip)
-		filp->private_data = inode->u.generic_ip;
+	if (inode->i_private)
+		filp->private_data = inode->i_private;
 	return 0;
 }
 
@@ -158,7 +158,7 @@ int oprofilefs_create_ulong(struct super
 	if (!d)
 		return -EFAULT;
 
-	d->d_inode->u.generic_ip = val;
+	d->d_inode->i_private = val;
 	return 0;
 }
 
@@ -171,7 +171,7 @@ int oprofilefs_create_ro_ulong(struct su
 	if (!d)
 		return -EFAULT;
 
-	d->d_inode->u.generic_ip = val;
+	d->d_inode->i_private = val;
 	return 0;
 }
 
@@ -197,7 +197,7 @@ int oprofilefs_create_ro_atomic(struct s
 	if (!d)
 		return -EFAULT;
 
-	d->d_inode->u.generic_ip = val;
+	d->d_inode->i_private = val;
 	return 0;
 }
 
diff -puN drivers/pci/hotplug/cpqphp_sysfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/pci/hotplug/cpqphp_sysfs.c
--- a/drivers/pci/hotplug/cpqphp_sysfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/pci/hotplug/cpqphp_sysfs.c
@@ -140,7 +140,7 @@ struct ctrl_dbg {
 
 static int open(struct inode *inode, struct file *file)
 {
-	struct controller *ctrl = inode->u.generic_ip;
+	struct controller *ctrl = inode->i_private;
 	struct ctrl_dbg *dbg;
 	int retval = -ENOMEM;
 
diff -puN drivers/usb/core/devio.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/core/devio.c
--- a/drivers/usb/core/devio.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/core/devio.c
@@ -555,7 +555,7 @@ static int usbdev_open(struct inode *ino
 	if (imajor(inode) == USB_DEVICE_MAJOR)
 		dev = usbdev_lookup_minor(iminor(inode));
 	if (!dev)
-		dev = inode->u.generic_ip;
+		dev = inode->i_private;
 	if (!dev) {
 		kfree(ps);
 		goto out;
diff -puN drivers/usb/core/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/core/inode.c
--- a/drivers/usb/core/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/core/inode.c
@@ -402,8 +402,8 @@ static loff_t default_file_lseek (struct
 
 static int default_open (struct inode *inode, struct file *file)
 {
-	if (inode->u.generic_ip)
-		file->private_data = inode->u.generic_ip;
+	if (inode->i_private)
+		file->private_data = inode->i_private;
 
 	return 0;
 }
@@ -509,7 +509,7 @@ static struct dentry *fs_create_file (co
 	} else {
 		if (dentry->d_inode) {
 			if (data)
-				dentry->d_inode->u.generic_ip = data;
+				dentry->d_inode->i_private = data;
 			if (fops)
 				dentry->d_inode->i_fop = fops;
 			dentry->d_inode->i_uid = uid;
diff -puN drivers/usb/gadget/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/gadget/inode.c
--- a/drivers/usb/gadget/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/gadget/inode.c
@@ -844,7 +844,7 @@ fail1:
 static int
 ep_open (struct inode *inode, struct file *fd)
 {
-	struct ep_data		*data = inode->u.generic_ip;
+	struct ep_data		*data = inode->i_private;
 	int			value = -EBUSY;
 
 	if (down_interruptible (&data->lock) != 0)
@@ -1909,7 +1909,7 @@ fail:
 static int
 dev_open (struct inode *inode, struct file *fd)
 {
-	struct dev_data		*dev = inode->u.generic_ip;
+	struct dev_data		*dev = inode->i_private;
 	int			value = -EBUSY;
 
 	if (dev->state == STATE_DEV_DISABLED) {
@@ -1970,7 +1970,7 @@ gadgetfs_make_inode (struct super_block 
 		inode->i_blocks = 0;
 		inode->i_atime = inode->i_mtime = inode->i_ctime
 				= CURRENT_TIME;
-		inode->u.generic_ip = data;
+		inode->i_private = data;
 		inode->i_fop = fops;
 	}
 	return inode;
diff -puN drivers/usb/host/isp116x-hcd.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/host/isp116x-hcd.c
--- a/drivers/usb/host/isp116x-hcd.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/host/isp116x-hcd.c
@@ -1204,7 +1204,7 @@ static int isp116x_show_dbg(struct seq_f
 
 static int isp116x_open_seq(struct inode *inode, struct file *file)
 {
-	return single_open(file, isp116x_show_dbg, inode->u.generic_ip);
+	return single_open(file, isp116x_show_dbg, inode->i_private);
 }
 
 static struct file_operations isp116x_debug_fops = {
diff -puN drivers/usb/host/uhci-debug.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/host/uhci-debug.c
--- a/drivers/usb/host/uhci-debug.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/host/uhci-debug.c
@@ -428,7 +428,7 @@ struct uhci_debug {
 
 static int uhci_debug_open(struct inode *inode, struct file *file)
 {
-	struct uhci_hcd *uhci = inode->u.generic_ip;
+	struct uhci_hcd *uhci = inode->i_private;
 	struct uhci_debug *up;
 	int ret = -ENOMEM;
 	unsigned long flags;
diff -puN drivers/usb/mon/mon_stat.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/mon/mon_stat.c
--- a/drivers/usb/mon/mon_stat.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/mon/mon_stat.c
@@ -28,7 +28,7 @@ static int mon_stat_open(struct inode *i
 	if ((sp = kmalloc(sizeof(struct snap), GFP_KERNEL)) == NULL)
 		return -ENOMEM;
 
-	mbus = inode->u.generic_ip;
+	mbus = inode->i_private;
 
 	sp->slen = snprintf(sp->str, STAT_BUF_SIZE,
 	    "nreaders %d events %u text_lost %u\n",
diff -puN drivers/usb/mon/mon_text.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private drivers/usb/mon/mon_text.c
--- a/drivers/usb/mon/mon_text.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/drivers/usb/mon/mon_text.c
@@ -238,7 +238,7 @@ static int mon_text_open(struct inode *i
 	int rc;
 
 	mutex_lock(&mon_lock);
-	mbus = inode->u.generic_ip;
+	mbus = inode->i_private;
 	ubus = mbus->u_bus;
 
 	rp = kzalloc(sizeof(struct mon_reader_text), GFP_KERNEL);
@@ -401,7 +401,7 @@ static int mon_text_release(struct inode
 	struct mon_event_text *ep;
 
 	mutex_lock(&mon_lock);
-	mbus = inode->u.generic_ip;
+	mbus = inode->i_private;
 
 	if (mbus->nreaders <= 0) {
 		printk(KERN_ERR TAG ": consistency error on close\n");
diff -puN fs/autofs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/autofs/inode.c
--- a/fs/autofs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/autofs/inode.c
@@ -241,7 +241,7 @@ static void autofs_read_inode(struct ino
 		
 		inode->i_op = &autofs_symlink_inode_operations;
 		sl = &sbi->symlink[n];
-		inode->u.generic_ip = sl;
+		inode->i_private = sl;
 		inode->i_mode = S_IFLNK | S_IRWXUGO;
 		inode->i_mtime.tv_sec = inode->i_ctime.tv_sec = sl->mtime;
 		inode->i_mtime.tv_nsec = inode->i_ctime.tv_nsec = 0;
diff -puN fs/autofs/symlink.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/autofs/symlink.c
--- a/fs/autofs/symlink.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/autofs/symlink.c
@@ -15,7 +15,7 @@
 /* Nothing to release.. */
 static void *autofs_follow_link(struct dentry *dentry, struct nameidata *nd)
 {
-	char *s=((struct autofs_symlink *)dentry->d_inode->u.generic_ip)->data;
+	char *s=((struct autofs_symlink *)dentry->d_inode->i_private)->data;
 	nd_set_link(nd, s);
 	return NULL;
 }
diff -puN fs/binfmt_misc.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/binfmt_misc.c
--- a/fs/binfmt_misc.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/binfmt_misc.c
@@ -517,7 +517,7 @@ static struct inode *bm_get_inode(struct
 
 static void bm_clear_inode(struct inode *inode)
 {
-	kfree(inode->u.generic_ip);
+	kfree(inode->i_private);
 }
 
 static void kill_node(Node *e)
@@ -545,7 +545,7 @@ static void kill_node(Node *e)
 static ssize_t
 bm_entry_read(struct file * file, char __user * buf, size_t nbytes, loff_t *ppos)
 {
-	Node *e = file->f_dentry->d_inode->u.generic_ip;
+	Node *e = file->f_dentry->d_inode->i_private;
 	loff_t pos = *ppos;
 	ssize_t res;
 	char *page;
@@ -579,7 +579,7 @@ static ssize_t bm_entry_write(struct fil
 				size_t count, loff_t *ppos)
 {
 	struct dentry *root;
-	Node *e = file->f_dentry->d_inode->u.generic_ip;
+	Node *e = file->f_dentry->d_inode->i_private;
 	int res = parse_command(buffer, count);
 
 	switch (res) {
@@ -646,7 +646,7 @@ static ssize_t bm_register_write(struct 
 	}
 
 	e->dentry = dget(dentry);
-	inode->u.generic_ip = e;
+	inode->i_private = e;
 	inode->i_fop = &bm_entry_operations;
 
 	d_instantiate(dentry, inode);
diff -puN fs/debugfs/file.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/debugfs/file.c
--- a/fs/debugfs/file.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/debugfs/file.c
@@ -32,8 +32,8 @@ static ssize_t default_write_file(struct
 
 static int default_open(struct inode *inode, struct file *file)
 {
-	if (inode->u.generic_ip)
-		file->private_data = inode->u.generic_ip;
+	if (inode->i_private)
+		file->private_data = inode->i_private;
 
 	return 0;
 }
diff -puN fs/debugfs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/debugfs/inode.c
--- a/fs/debugfs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/debugfs/inode.c
@@ -169,7 +169,7 @@ static int debugfs_create_by_name(const 
  *          directory dentry if set.  If this paramater is NULL, then the
  *          file will be created in the root of the debugfs filesystem.
  * @data: a pointer to something that the caller will want to get to later
- *        on.  The inode.u.generic_ip pointer will point to this value on
+ *        on.  The inode.i_private pointer will point to this value on
  *        the open() call.
  * @fops: a pointer to a struct file_operations that should be used for
  *        this file.
@@ -210,7 +210,7 @@ struct dentry *debugfs_create_file(const
 
 	if (dentry->d_inode) {
 		if (data)
-			dentry->d_inode->u.generic_ip = data;
+			dentry->d_inode->i_private = data;
 		if (fops)
 			dentry->d_inode->i_fop = fops;
 	}
diff -puN fs/devpts/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/devpts/inode.c
--- a/fs/devpts/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/devpts/inode.c
@@ -177,7 +177,7 @@ int devpts_pty_new(struct tty_struct *tt
 	inode->i_gid = config.setgid ? config.gid : current->fsgid;
 	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;
 	init_special_inode(inode, S_IFCHR|config.mode, device);
-	inode->u.generic_ip = tty;
+	inode->i_private = tty;
 
 	dentry = get_node(number);
 	if (!IS_ERR(dentry) && !dentry->d_inode)
@@ -196,7 +196,7 @@ struct tty_struct *devpts_get_tty(int nu
 	tty = NULL;
 	if (!IS_ERR(dentry)) {
 		if (dentry->d_inode)
-			tty = dentry->d_inode->u.generic_ip;
+			tty = dentry->d_inode->i_private;
 		dput(dentry);
 	}
 
diff -puN fs/dlm/debug_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/dlm/debug_fs.c
--- a/fs/dlm/debug_fs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/dlm/debug_fs.c
@@ -254,7 +254,7 @@ static int do_open(struct inode *inode, 
 		return ret;
 
 	seq = file->private_data;
-	seq->private = inode->u.generic_ip;
+	seq->private = inode->i_private;
 
 	return 0;
 }
@@ -301,6 +301,6 @@ static struct file_operations rsb_fops =
 
 static int waiters_open(struct inode *inode, struct file *file)
 {
-	file->private_data = inode->u.generic_ip;
+	file->private_data = inode->i_private;
 	return 0;
 }
diff -puN fs/freevxfs/vxfs.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/freevxfs/vxfs.h
--- a/fs/freevxfs/vxfs.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/freevxfs/vxfs.h
@@ -252,7 +252,7 @@ enum {
  * Get filesystem private data from VFS inode.
  */
 #define VXFS_INO(ip) \
-	((struct vxfs_inode_info *)(ip)->u.generic_ip)
+	((struct vxfs_inode_info *)(ip)->i_private)
 
 /*
  * Get filesystem private data from VFS superblock.
diff -puN fs/freevxfs/vxfs_inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/freevxfs/vxfs_inode.c
--- a/fs/freevxfs/vxfs_inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/freevxfs/vxfs_inode.c
@@ -243,7 +243,7 @@ vxfs_iinit(struct inode *ip, struct vxfs
 	ip->i_blocks = vip->vii_blocks;
 	ip->i_generation = vip->vii_gen;
 
-	ip->u.generic_ip = (void *)vip;
+	ip->i_private = vip;
 	
 }
 
@@ -338,5 +338,5 @@ vxfs_read_inode(struct inode *ip)
 void
 vxfs_clear_inode(struct inode *ip)
 {
-	kmem_cache_free(vxfs_inode_cachep, ip->u.generic_ip);
+	kmem_cache_free(vxfs_inode_cachep, ip->i_private);
 }
diff -puN fs/fuse/control.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/fuse/control.c
--- a/fs/fuse/control.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/fuse/control.c
@@ -23,7 +23,7 @@ static struct fuse_conn *fuse_ctl_file_c
 {
 	struct fuse_conn *fc;
 	mutex_lock(&fuse_mutex);
-	fc = file->f_dentry->d_inode->u.generic_ip;
+	fc = file->f_dentry->d_inode->i_private;
 	if (fc)
 		fc = fuse_conn_get(fc);
 	mutex_unlock(&fuse_mutex);
@@ -98,7 +98,7 @@ static struct dentry *fuse_ctl_add_dentr
 		inode->i_op = iop;
 	inode->i_fop = fop;
 	inode->i_nlink = nlink;
-	inode->u.generic_ip = fc;
+	inode->i_private = fc;
 	d_add(dentry, inode);
 	return dentry;
 }
@@ -150,7 +150,7 @@ void fuse_ctl_remove_conn(struct fuse_co
 
 	for (i = fc->ctl_ndents - 1; i >= 0; i--) {
 		struct dentry *dentry = fc->ctl_dentry[i];
-		dentry->d_inode->u.generic_ip = NULL;
+		dentry->d_inode->i_private = NULL;
 		d_drop(dentry);
 		dput(dentry);
 	}
diff -puN fs/gfs2/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/gfs2/inode.c
--- a/fs/gfs2/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/gfs2/inode.c
@@ -169,7 +169,7 @@ struct inode *gfs2_inode_lookup(struct s
 	if (inode->i_state & I_NEW) {
 		struct gfs2_sbd *sdp = GFS2_SB(inode);
 		umode_t mode = DT2IF(type);
-		inode->u.generic_ip = ip;
+		inode->i_private = ip;
 		inode->i_mode = mode;
 
 		if (S_ISREG(mode)) {
diff -puN fs/gfs2/meta_io.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/gfs2/meta_io.c
--- a/fs/gfs2/meta_io.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/gfs2/meta_io.c
@@ -186,7 +186,7 @@ struct inode *gfs2_aspace_get(struct gfs
 		mapping_set_gfp_mask(aspace->i_mapping, GFP_KERNEL);
 		aspace->i_mapping->a_ops = &aspace_aops;
 		aspace->i_size = ~0ULL;
-		aspace->u.generic_ip = NULL;
+		aspace->i_private = NULL;
 		insert_inode_hash(aspace);
 	}
 	return aspace;
diff -puN fs/gfs2/ops_super.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/gfs2/ops_super.c
--- a/fs/gfs2/ops_super.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/gfs2/ops_super.c
@@ -55,7 +55,7 @@ static int gfs2_write_inode(struct inode
 	struct gfs2_inode *ip = GFS2_I(inode);
 
 	/* Check this is a "normal" inode */
-	if (inode->u.generic_ip) {
+	if (inode->i_private) {
 		if (current->flags & PF_MEMALLOC)
 			return 0;
 		if (sync)
@@ -283,7 +283,7 @@ static void gfs2_clear_inode(struct inod
 	 * serves to contain an address space (see rgrp.c, meta_io.c)
 	 * which therefore doesn't have its own glocks.
 	 */
-	if (inode->u.generic_ip) {
+	if (inode->i_private) {
 		struct gfs2_inode *ip = GFS2_I(inode);
 		gfs2_glock_inode_squish(inode);
 		gfs2_assert(inode->i_sb->s_fs_info, ip->i_gl->gl_state == LM_ST_UNLOCKED);
@@ -384,7 +384,7 @@ static void gfs2_delete_inode(struct ino
 	struct gfs2_holder gh;
 	int error;
 
-	if (!inode->u.generic_ip)
+	if (!inode->i_private)
 		goto out;
 
 	error = gfs2_glock_nq_init(ip->i_gl, LM_ST_EXCLUSIVE, LM_FLAG_TRY_1CB | GL_NOCACHE, &gh);
diff -puN fs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/inode.c
--- a/fs/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/inode.c
@@ -163,7 +163,7 @@ static struct inode *alloc_inode(struct 
 				bdi = sb->s_bdev->bd_inode->i_mapping->backing_dev_info;
 			mapping->backing_dev_info = bdi;
 		}
-		memset(&inode->u, 0, sizeof(inode->u));
+		inode->i_private = 0;
 		inode->i_mapping = mapping;
 	}
 	return inode;
diff -puN fs/jffs/inode-v23.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/jffs/inode-v23.c
--- a/fs/jffs/inode-v23.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/jffs/inode-v23.c
@@ -369,7 +369,7 @@ jffs_new_inode(const struct inode * dir,
 
 	f = jffs_find_file(c, raw_inode->ino);
 
-	inode->u.generic_ip = (void *)f;
+	inode->i_private = (void *)f;
 	insert_inode_hash(inode);
 
 	return inode;
@@ -442,7 +442,7 @@ jffs_rename(struct inode *old_dir, struc
 	});
 
 	result = -ENOTDIR;
-	if (!(old_dir_f = (struct jffs_file *)old_dir->u.generic_ip)) {
+	if (!(old_dir_f = old_dir->i_private)) {
 		D(printk("jffs_rename(): Old dir invalid.\n"));
 		goto jffs_rename_end;
 	}
@@ -456,7 +456,7 @@ jffs_rename(struct inode *old_dir, struc
 
 	/* Find the new directory.  */
 	result = -ENOTDIR;
-	if (!(new_dir_f = (struct jffs_file *)new_dir->u.generic_ip)) {
+	if (!(new_dir_f = new_dir->i_private)) {
 		D(printk("jffs_rename(): New dir invalid.\n"));
 		goto jffs_rename_end;
 	}
@@ -593,7 +593,7 @@ jffs_readdir(struct file *filp, void *di
 		}
 		else {
 			ddino = ((struct jffs_file *)
-				 inode->u.generic_ip)->pino;
+				 inode->i_private)->pino;
 		}
 		D3(printk("jffs_readdir(): \"..\" %u\n", ddino));
 		if (filldir(dirent, "..", 2, filp->f_pos, ddino, DT_DIR) < 0) {
@@ -604,7 +604,7 @@ jffs_readdir(struct file *filp, void *di
 		}
 		filp->f_pos++;
 	}
-	f = ((struct jffs_file *)inode->u.generic_ip)->children;
+	f = ((struct jffs_file *)inode->i_private)->children;
 
 	j = 2;
 	while(f && (f->deleted || j++ < filp->f_pos )) {
@@ -668,7 +668,7 @@ jffs_lookup(struct inode *dir, struct de
 	}
 
 	r = -EACCES;
-	if (!(d = (struct jffs_file *)dir->u.generic_ip)) {
+	if (!(d = (struct jffs_file *)dir->i_private)) {
 		D(printk("jffs_lookup(): No such inode! (%lu)\n",
 			 dir->i_ino));
 		goto jffs_lookup_end;
@@ -739,7 +739,7 @@ jffs_do_readpage_nolock(struct file *fil
 	unsigned long read_len;
 	int result;
 	struct inode *inode = (struct inode*)page->mapping->host;
-	struct jffs_file *f = (struct jffs_file *)inode->u.generic_ip;
+	struct jffs_file *f = (struct jffs_file *)inode->i_private;
 	struct jffs_control *c = (struct jffs_control *)inode->i_sb->s_fs_info;
 	int r;
 	loff_t offset;
@@ -828,7 +828,7 @@ jffs_mkdir(struct inode *dir, struct den
 	});
 
 	lock_kernel();
-	dir_f = (struct jffs_file *)dir->u.generic_ip;
+	dir_f = dir->i_private;
 
 	ASSERT(if (!dir_f) {
 		printk(KERN_ERR "jffs_mkdir(): No reference to a "
@@ -972,7 +972,7 @@ jffs_remove(struct inode *dir, struct de
 		kfree(_name);
 	});
 
-	dir_f = (struct jffs_file *) dir->u.generic_ip;
+	dir_f = dir->i_private;
 	c = dir_f->c;
 
 	result = -ENOENT;
@@ -1082,7 +1082,7 @@ jffs_mknod(struct inode *dir, struct den
 	if (!old_valid_dev(rdev))
 		return -EINVAL;
 	lock_kernel();
-	dir_f = (struct jffs_file *)dir->u.generic_ip;
+	dir_f = dir->i_private;
 	c = dir_f->c;
 
 	D3(printk (KERN_NOTICE "mknod(): down biglock\n"));
@@ -1186,7 +1186,7 @@ jffs_symlink(struct inode *dir, struct d
 		kfree(_symname);
 	});
 
-	dir_f = (struct jffs_file *)dir->u.generic_ip;
+	dir_f = dir->i_private;
 	ASSERT(if (!dir_f) {
 		printk(KERN_ERR "jffs_symlink(): No reference to a "
 		       "jffs_file struct in inode.\n");
@@ -1289,7 +1289,7 @@ jffs_create(struct inode *dir, struct de
 		kfree(s);
 	});
 
-	dir_f = (struct jffs_file *)dir->u.generic_ip;
+	dir_f = dir->i_private;
 	ASSERT(if (!dir_f) {
 		printk(KERN_ERR "jffs_create(): No reference to a "
 		       "jffs_file struct in inode.\n");
@@ -1403,9 +1403,9 @@ jffs_file_write(struct file *filp, const
 		goto out_isem;
 	}
 
-	if (!(f = (struct jffs_file *)inode->u.generic_ip)) {
-		D(printk("jffs_file_write(): inode->u.generic_ip = 0x%p\n",
-				inode->u.generic_ip));
+	if (!(f = inode->i_private)) {
+		D(printk("jffs_file_write(): inode->i_private = 0x%p\n",
+				inode->i_private));
 		goto out_isem;
 	}
 
@@ -1693,7 +1693,7 @@ jffs_read_inode(struct inode *inode)
 		mutex_unlock(&c->fmc->biglock);
 		return;
 	}
-	inode->u.generic_ip = (void *)f;
+	inode->i_private = f;
 	inode->i_mode = f->mode;
 	inode->i_nlink = f->nlink;
 	inode->i_uid = f->uid;
@@ -1748,7 +1748,7 @@ jffs_delete_inode(struct inode *inode)
 	lock_kernel();
 	inode->i_size = 0;
 	inode->i_blocks = 0;
-	inode->u.generic_ip = NULL;
+	inode->i_private = NULL;
 	clear_inode(inode);
 	if (inode->i_nlink == 0) {
 		c = (struct jffs_control *) inode->i_sb->s_fs_info;
diff -puN fs/libfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/libfs.c
--- a/fs/libfs.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/libfs.c
@@ -547,7 +547,7 @@ int simple_attr_open(struct inode *inode
 
 	attr->get = get;
 	attr->set = set;
-	attr->data = inode->u.generic_ip;
+	attr->data = inode->i_private;
 	attr->fmt = fmt;
 	mutex_init(&attr->mutex);
 
diff -puN fs/ocfs2/dlmglue.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private fs/ocfs2/dlmglue.c
--- a/fs/ocfs2/dlmglue.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/fs/ocfs2/dlmglue.c
@@ -1995,7 +1995,7 @@ static int ocfs2_dlm_debug_open(struct i
 		mlog_errno(ret);
 		goto out;
 	}
-	osb = (struct ocfs2_super *) inode->u.generic_ip;
+	osb = inode->i_private;
 	ocfs2_get_dlm_debug(osb->osb_dlm_debug);
 	priv->p_dlm_debug = osb->osb_dlm_debug;
 	INIT_LIST_HEAD(&priv->p_iter_res.l_debug_list);
diff -puN include/linux/fs.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private include/linux/fs.h
--- a/include/linux/fs.h~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/include/linux/fs.h
@@ -549,9 +549,7 @@ struct inode {
 
 	atomic_t		i_writecount;
 	void			*i_security;
-	union {
-		void		*generic_ip;
-	} u;
+	void			*i_private; /* fs or device private pointer */
 #ifdef __NEED_I_SIZE_ORDERED
 	seqcount_t		i_size_seqcount;
 #endif
diff -puN kernel/relay.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private kernel/relay.c
--- a/kernel/relay.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/kernel/relay.c
@@ -669,7 +669,7 @@ EXPORT_SYMBOL_GPL(relay_flush);
  */
 static int relay_file_open(struct inode *inode, struct file *filp)
 {
-	struct rchan_buf *buf = inode->u.generic_ip;
+	struct rchan_buf *buf = inode->i_private;
 	kref_get(&buf->kref);
 	filp->private_data = buf;
 
diff -puN security/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private security/inode.c
--- a/security/inode.c~inode_diet-replace-inodeugeneric_ip-with-inodei_private
+++ a/security/inode.c
@@ -44,8 +44,8 @@ static ssize_t default_write_file(struct
 
 static int default_open(struct inode *inode, struct file *file)
 {
-	if (inode->u.generic_ip)
-		file->private_data = inode->u.generic_ip;
+	if (inode->i_private)
+		file->private_data = inode->i_private;
 
 	return 0;
 }
@@ -194,7 +194,7 @@ static int create_by_name(const char *na
  *          directory dentry if set.  If this paramater is NULL, then the
  *          file will be created in the root of the securityfs filesystem.
  * @data: a pointer to something that the caller will want to get to later
- *        on.  The inode.u.generic_ip pointer will point to this value on
+ *        on.  The inode.i_private pointer will point to this value on
  *        the open() call.
  * @fops: a pointer to a struct file_operations that should be used for
  *        this file.
@@ -240,7 +240,7 @@ struct dentry *securityfs_create_file(co
 		if (fops)
 			dentry->d_inode->i_fop = fops;
 		if (data)
-			dentry->d_inode->u.generic_ip = data;
+			dentry->d_inode->i_private = data;
 	}
 exit:
 	return dentry;
_
