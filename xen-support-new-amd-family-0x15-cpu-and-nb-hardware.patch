From: Bhavna Sarathy <bnagendr@redhat.com>
Date: Wed, 18 Aug 2010 20:52:04 -0400
Subject: [xen] support new AMD family 0x15 CPU and NB hardware
Message-id: <20100818205756.13303.3085.sendpatchset@localhost.localdomain>
Patchwork-id: 27685
O-Subject: [RHEL5.6 XEN PATCH] Support new CPU and NB family 0x15 support
Bugzilla: 619092
RH-Acked-by: Andrew Jones <drjones@redhat.com>

Resolves 619092

This patch adds the family checks necessary for family 0x15 processors to
update Xen of the new family CPUID information. Xen makes family checks at
various places, and the task here is to run through the family checks and
make necessary changes to account for the new processor family.  Through
testing we found ASIDs was disabled due to a missing family check and that
has been fixed up as well.

C/s:  20596
http://lists.xensource.com/archives/html/xen-devel/2010-05/msg00772.html

Testing: patch tested on both Ontario/Inagua and a Magny-cours/Dinar for
regression testing.

Please review and ACK

Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/arch/x86/apic.c b/arch/x86/apic.c
index ee531c8..819f266 100644
--- a/arch/x86/apic.c
+++ b/arch/x86/apic.c
@@ -737,7 +737,7 @@ static int __init detect_init_APIC (void)
     switch (boot_cpu_data.x86_vendor) {
     case X86_VENDOR_AMD:
         if ((boot_cpu_data.x86 == 6 && boot_cpu_data.x86_model > 1) ||
-            (boot_cpu_data.x86 >= 15 && boot_cpu_data.x86 <= 17))
+            (boot_cpu_data.x86 >= 0xf && boot_cpu_data.x86 <= 0x17))
             break;
         goto no_apic;
     case X86_VENDOR_INTEL:
diff --git a/arch/x86/hvm/svm/asid.c b/arch/x86/hvm/svm/asid.c
index 57477aa..31ba0dc 100644
--- a/arch/x86/hvm/svm/asid.c
+++ b/arch/x86/hvm/svm/asid.c
@@ -78,26 +78,25 @@ static struct svm_asid_data *svm_asid_core_data(void)
  */
 void svm_asid_init(struct cpuinfo_x86 *c)
 {
-    int nasids;
+    int nasids = 0;
     struct svm_asid_data *data = svm_asid_core_data();
 
-    /* Find #ASID. */
-    nasids = cpuid_ebx(0x8000000A);
-    data->max_asid = nasids - 1;
-
     /* Check if we can use ASIDs. */
     data->erratum170 =
-        !((c->x86 == 0x10) ||
+        !((c->x86 >= 0x10) ||
           ((c->x86 == 0xf) && (c->x86_model >= 0x68) && (c->x86_mask >= 1)));
 
-    printk("AMD SVM: ASIDs %s \n",
-           (data->erratum170 ? "disabled." : "enabled."));
+    if (!data->erratum170 )
+        nasids = cpuid_ebx(0x8000000A);
+
+    data->max_asid = nasids - 1;
+    printk("AMD SVM: ASIDS %s\n", (nasids ? "enabled." : "disabled."));
 
     /* Initialize ASID assigment. */
-    if ( data->erratum170 )
+    if ( nasids == 0 )
     {
-        /* On errata #170, VCPUs and phys processors should have same
-          generation.  We set both to invalid. */
+        /* In this case, VCPUs and phys processors should have same
+         *  generation.  We set both to invalid. */
         data->core_asid_generation = SVM_ASID_INVALID_GENERATION;
     }
     else
diff --git a/arch/x86/nmi.c b/arch/x86/nmi.c
index b30df07..9e3941b 100644
--- a/arch/x86/nmi.c
+++ b/arch/x86/nmi.c
@@ -316,7 +316,7 @@ void __pminit setup_apic_nmi_watchdog(void)
     case X86_VENDOR_AMD:
         switch (boot_cpu_data.x86) {
 	case 6:
-	case 15 ... 17:
+	case 0xf ... 0x17:
 	        setup_k7_watchdog();
 		break;
 	default:
diff --git a/arch/x86/oprofile/nmi_int.c b/arch/x86/oprofile/nmi_int.c
index 4c9d1e7..595e73f 100644
--- a/arch/x86/oprofile/nmi_int.c
+++ b/arch/x86/oprofile/nmi_int.c
@@ -370,6 +370,18 @@ static int __init nmi_init(void)
 				model = &op_athlon_spec;
 				cpu_type = "x86-64/family11";
 				break;
+			case 0x12:
+				model = &op_athlon_spec;
+				cpu_type = "x86-64/family12";
+				break;
+			case 0x14:
+				model = &op_athlon_spec;
+				cpu_type = "x86-64/family14";
+				break;
+			case 0x15:
+				model = &op_athlon_spec;
+				cpu_type = "x86-64/family15";
+				break;
 			}
 			break;
  
