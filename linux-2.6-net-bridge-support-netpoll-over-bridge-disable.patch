bridge: Partially disable netpoll support
in order to avoid use after free skb->dev in netpoll code.

https://jira.sw.ru/browse/PCLIN-30149

https://bugzilla.redhat.com/show_bug.cgi?id=715306
https://bugzilla.kernel.org/show_bug.cgi?id=16448


This is a backpot of a mainstream patch:

From: Herbert Xu <herbert@gondor.apana.org.au>
Date: Mon, 19 Jul 2010 19:26:45 +0000 (+0000)
Subject: bridge: Partially disable netpoll support
X-Git-Tag: v2.6.35-rc6~15^2
X-Git-Url: http://git390.marist.edu/cgi-bin/gitweb.cgi?p=linux-2.6.git;a=commitdiff_plain;h=573201f36fd9c7c6d5218cdcd9948cee700b277d

bridge: Partially disable netpoll support

The new netpoll code in bridging contains use-after-free bugs
that are non-trivial to fix.

This patch fixes this by removing the code that uses skbs after
they're freed.

As a consequence, this means that we can no longer call bridge
from the netpoll path, so this patch also removes the controller
function in order to disable netpoll.

Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

Thanks,
Signed-off-by: David S. Miller <davem@davemloft.net>

--- ./net/bridge/br_device.c.netpoll	2011-09-22 11:25:07.000000000 +0400
+++ ./net/bridge/br_device.c	2011-09-22 11:35:56.000000000 +0400
@@ -189,14 +189,6 @@ bool br_devices_support_netpoll(struct n
 	return count != 0 && ret;
 }
 
-void br_poll_controller(struct net_device *br_dev)
-{
-	struct netpoll *np = br_dev->npinfo->netpoll;
-
-	if (np->real_dev != br_dev)
-		netpoll_poll_dev(np->real_dev);
-}
-
 void br_netpoll_cleanup(struct net_device *br_dev)
 {
 	struct net_bridge *br = netdev_priv(br_dev);
@@ -211,10 +203,6 @@ void br_netpoll_cleanup(struct net_devic
 
 #else
 
-void br_poll_controller(struct net_device *br_dev)
-{
-}
-
 void br_netpoll_cleanup(struct net_device *br_dev)
 {
 }
--- ./net/bridge/br_forward.c.netpoll	2011-09-22 11:25:07.000000000 +0400
+++ ./net/bridge/br_forward.c	2011-09-22 11:34:57.000000000 +0400
@@ -54,15 +54,7 @@ int br_dev_queue_push_xmit(struct sk_buf
 #endif
 		{
 			skb_push(skb, ETH_HLEN);
-
-#ifdef CONFIG_NET_POLL_CONTROLLER
-			if (unlikely(irqs_disabled())) {
-				if (skb->dev->npinfo)
-					netpoll_send_skb(skb->dev->npinfo->netpoll, skb);
-				skb->dev->priv_flags &= ~IFF_IN_NETPOLL;
-			} else
-#endif
-				dev_queue_xmit(skb);
+			dev_queue_xmit(skb);
 		}
 	}
 
@@ -78,29 +70,9 @@ int br_forward_finish(struct sk_buff *sk
 
 static void __br_deliver(const struct net_bridge_port *to, struct sk_buff *skb)
 {
-#ifdef CONFIG_NET_POLL_CONTROLLER
-	struct net_bridge *br = to->br;
-	if (unlikely(irqs_disabled())) {
-		struct netpoll *np;
-		if (skb->dev->npinfo) {
-			to->dev->npinfo = skb->dev->npinfo;
-			np = skb->dev->npinfo->netpoll;
-			np->real_dev = np->dev = to->dev;
-			to->dev->priv_flags |= IFF_IN_NETPOLL;
-		} else {
-			skb->dev->priv_flags &= ~IFF_IN_NETPOLL;
-		}
-	}
-#endif
 	skb->dev = to->dev;
 	NF_HOOK(PF_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
 			br_forward_finish);
-#ifdef CONFIG_NET_POLL_CONTROLLER
-	if (skb->dev->npinfo) {
-		skb->dev->npinfo->netpoll->dev = br->dev;
-		skb->dev->npinfo = NULL;
-	}
-#endif
 }
 
 static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
--- ./net/bridge/br_if.c.netpoll	2011-09-22 11:25:07.000000000 +0400
+++ ./net/bridge/br_if.c	2011-09-22 11:38:06.000000000 +0400
@@ -231,9 +231,6 @@ static struct net_device *new_bridge_dev
 	br->topology_change_detected = 0;
 	br->ageing_time = 300 * HZ;
 	INIT_LIST_HEAD(&br->age_list);
-#ifdef CONFIG_NET_POLL_CONTROLLER
-	br->dev->poll_controller = br_poll_controller;
-#endif
 
 	br_stp_timer_init(br);
 	br_multicast_init(br);
--- ./net/bridge/br_private.h.netpoll	2011-09-22 11:25:07.000000000 +0400
+++ ./net/bridge/br_private.h	2011-09-22 11:37:08.000000000 +0400
@@ -224,7 +224,6 @@ extern void br_dev_setup(struct net_devi
 extern int br_dev_xmit(struct sk_buff *skb, struct net_device *dev);
 extern int br_xmit(struct sk_buff *skb, struct net_bridge_port *port);
 extern bool br_devices_support_netpoll(struct net_bridge *br);
-extern void br_poll_controller(struct net_device *br_dev);
 extern void br_netpoll_cleanup(struct net_device *br_dev);
 
 /* br_fdb.c */
