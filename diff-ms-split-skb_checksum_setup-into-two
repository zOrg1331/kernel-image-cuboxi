Subject:
[patch 1/3] [v2] separate function skb_checksum_setup_v4()
From:
Dmitry Skorodumov <sdmitry@parallels.com>
Date:
Wed, 16 Feb 2011 18:22:00 +0300
To:
Pavel Emelianov <xemul@parallels.com>
CC:
Denis Lunev <den@parallels.com>

Code to do actual work of setup ipv4 checksum offsets moved from skb_checksum_setup() to separate function
skb_checksum_setup_v4()

Signed-off-by: Dmitry Skorodumov <sdmitry@parallels.com>


patch1.patch

Code to do actual work of setup ipv4 checksum offsets
moved from skb_checksum_setup() to separate function
skb_checksum_setup_v4()

Signed-off-by: Dmitry Skorodumov <sdmitry@parallels.com>
--- a/net/core/dev.c	2011-02-11 19:05:32.000000000 +0300
+++ a/net/core/dev.c	2011-02-11 19:07:50.000000000 +0300
@@ -1540,40 +1540,46 @@ out_kfree_skb:
 }
 
 #if defined(CONFIG_XEN) || defined(CONFIG_VE)
-inline int skb_checksum_setup(struct sk_buff *skb)
+static inline int skb_checksum_setup_v4(struct sk_buff *skb)
 {
-	if (skb->proto_csum_blank) {
-		if (skb->protocol != htons(ETH_P_IP))
-			goto out;
-		if (skb->data < skb->nh.raw + sizeof(*skb->nh.iph) &&
-		    !pskb_may_pull(skb, skb->nh.raw + sizeof(*skb->nh.iph) -
-					skb->data))
-			goto out;
-		skb->h.raw = (unsigned char *)skb->nh.iph + 4*skb->nh.iph->ihl;
-		switch (skb->nh.iph->protocol) {
-		case IPPROTO_TCP:
-			skb->csum = offsetof(struct tcphdr, check);
-			break;
-		case IPPROTO_UDP:
-			skb->csum = offsetof(struct udphdr, check);
-			break;
-		default:
-			if (net_ratelimit())
-				printk(KERN_ERR "Attempting to checksum a non-"
-				       "TCP/UDP packet, dropping a protocol"
-				       " %d packet", skb->nh.iph->protocol);
-			goto out;
-		}
-		if (skb->data < skb->h.raw + skb->csum + 2 &&
-		    !pskb_may_pull(skb, skb->h.raw + skb->csum + 2 - skb->data))
-			goto out;
-		skb->ip_summed = CHECKSUM_HW;
-		skb->proto_csum_blank = 0;
+	if (skb->data < skb->nh.raw + sizeof(*skb->nh.iph) &&
+	    !pskb_may_pull(skb, skb->nh.raw + sizeof(*skb->nh.iph) -
+				skb->data))
+		goto out;
+	skb->h.raw = (unsigned char *)skb->nh.iph + 4*skb->nh.iph->ihl;
+	switch (skb->nh.iph->protocol) {
+	case IPPROTO_TCP:
+		skb->csum = offsetof(struct tcphdr, check);
+		break;
+	case IPPROTO_UDP:
+		skb->csum = offsetof(struct udphdr, check);
+		break;
+	default:
+		if (net_ratelimit())
+			printk(KERN_ERR "Attempting to checksum a non-"
+			       "TCP/UDP packet, dropping a protocol"
+			       " %d packet", skb->nh.iph->protocol);
+		goto out;
 	}
+	if (skb->data < skb->h.raw + skb->csum + 2 &&
+	    !pskb_may_pull(skb, skb->h.raw + skb->csum + 2 - skb->data))
+		goto out;
+	skb->ip_summed = CHECKSUM_HW;
+	skb->proto_csum_blank = 0;
 	return 0;
 out:
 	return -EPROTO;
 }
+
+inline int skb_checksum_setup(struct sk_buff *skb)
+{
+	if (skb->proto_csum_blank) {
+		if (skb->protocol == htons(ETH_P_IP))
+			return skb_checksum_setup_v4(skb);
+		return -EPROTO;
+	}
+	return 0;
+}
 #else
 inline int skb_checksum_setup(struct sk_buff *skb) { return 0; }
 #endif
